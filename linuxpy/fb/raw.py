#
# This file is part of the linuxpy project
#
# Copyright (c) 2024 Tiago Coutinho
# Distributed under the GPLv3 license. See LICENSE for more info.

# This file has been generated by __main__
# Date: 2025-02-05 10:55:50.155347
# System: Linux
# Release: 6.8.0-51-generic
# Version: #52-Ubuntu SMP PREEMPT_DYNAMIC Thu Dec  5 13:09:44 UTC 2024

import enum

from linuxpy.ctypes import POINTER, Struct, cchar, cuint, culong, u8, u16, u32
from linuxpy.ioctl import IOR as _IOR, IOW as _IOW, IOWR as _IOWR


class Type(enum.IntEnum):
    PACKED_PIXELS = 0  # Packed Pixels
    PLANES = 1  # Noncinterleaved planes
    INTERLEAVED_PLANES = 2  # Interleaved planes
    TEXT = 3  # Text/attributes
    VGA_PLANES = 4  # EGA/VGA planes
    FOURCC = 5  # Type identified by a V4L2 FOURCC


class Text(enum.IntEnum):
    MDA = 0  # Monochrome text
    CGA = 1  # CGA/EGA/VGA Color text
    S3_MMIO = 2  # S3 MMIO fasttext
    MGA_STEP16 = 3  # MGA Millenium I: text, attr, 14 reserved bytes
    MGA_STEP8 = 4  # other MGAs:      text, attr,  6 reserved bytes
    SVGA_GROUP = 8  # 8-15: SVGA tileblit compatible modes
    SVGA_STEP2 = 8  # SVGA text mode:  text, attr
    SVGA_STEP4 = 9  # SVGA text mode:  text, attr,  2 reserved bytes
    SVGA_STEP8 = 10  # SVGA text mode:  text, attr,  6 reserved bytes
    SVGA_STEP16 = 11  # SVGA text mode:  text, attr, 14 reserved bytes
    SVGA_LAST = 15  # reserved up to 15


class VGAPlanes(enum.IntEnum):
    VGA4 = 0  # 16 color planes (EGA/VGA)
    CFB4 = 1  # CFB4 in planes (VGA)
    CFB8 = 2  # CFB8 in planes (VGA)


class Visual(enum.IntEnum):
    MONO01 = 0  # Monochr. 1=Black 0=White
    MONO10 = 1  # Monochr. 1=White 0=Black
    TRUECOLOR = 2  # True color
    PSEUDOCOLOR = 3  # Pseudo color (like atari)
    DIRECTCOLOR = 4  # Direct color
    STATIC_PSEUDOCOLOR = 5  # Pseudo color readonly
    FOURCC = 6  # Visual identified by a V4L2 FOURCC


class Acceleration(enum.IntEnum):
    NONE = 0  # no hardware accelerator
    ATARIBLITT = 1  # Atari Blitter
    AMIGABLITT = 2  # Amiga Blitter
    S3_TRIO64 = 3  # Cybervision64 (S3 Trio64)
    NCR_77C32BLT = 4  # RetinaZ3 (NCR 77C32BLT)
    S3_VIRGE = 5  # Cybervision64/3D (S3 ViRGE)
    ATI_MACH64GX = 6  # ATI Mach 64GX family
    DEC_TGA = 7  # DEC 21030 TGA
    ATI_MACH64CT = 8  # ATI Mach 64CT family
    ATI_MACH64VT = 9  # ATI Mach 64CT family VT class
    ATI_MACH64GT = 10  # ATI Mach 64CT family GT class
    SUN_CREATOR = 11  # Sun Creator/Creator3D
    SUN_CGSIX = 12  # Sun cg6
    SUN_LEO = 13  # Sun leo/zx
    IMS_TWINTURBO = 14  # IMS Twin Turbo
    _3DLABS_PERMEDIA2 = 15  # 3Dlabs Permedia 2
    MATROX_MGA2064W = 16  # Matrox MGA2064W (Millenium)
    MATROX_MGA1064SG = 17  # Matrox MGA1064SG (Mystique)
    MATROX_MGA2164W = 18  # Matrox MGA2164W (Millenium II)
    MATROX_MGA2164W_AGP = 19  # Matrox MGA2164W (Millenium II)
    MATROX_MGAG100 = 20  # Matrox G100 (Productiva G100)
    MATROX_MGAG200 = 21  # Matrox G200 (Myst, Mill, ...)
    SUN_CG14 = 22  # Sun cgfourteen
    SUN_BWTWO = 23  # Sun bwtwo
    SUN_CGTHREE = 24  # Sun cgthree
    SUN_TCX = 25  # Sun tcx
    MATROX_MGAG400 = 26  # Matrox G400
    NV3 = 27  # nVidia RIVA 128
    NV4 = 28  # nVidia RIVA TNT
    NV5 = 29  # nVidia RIVA TNT2
    CT_6555x = 30  # C&T 6555x
    _3DFX_BANSHEE = 31  # 3Dfx Banshee
    ATI_RAGE128 = 32  # ATI Rage128 family
    IGS_CYBER2000 = 33  # CyberPro 2000
    IGS_CYBER2010 = 34  # CyberPro 2010
    IGS_CYBER5000 = 35  # CyberPro 5000
    SIS_GLAMOUR = 36  # SiS 300/630/540
    _3DLABS_PERMEDIA3 = 37  # 3Dlabs Permedia 3
    ATI_RADEON = 38  # ATI Radeon family
    I810 = 39  # Intel 810/815
    SIS_GLAMOUR_2 = 40  # SiS 315, 650, 740
    SIS_XABRE = 41  # SiS 330 ("Xabre")
    I830 = 42  # Intel 830M/845G/85x/865G
    NV_10 = 43  # nVidia Arch 10
    NV_20 = 44  # nVidia Arch 20
    NV_30 = 45  # nVidia Arch 30
    NV_40 = 46  # nVidia Arch 40
    XGI_VOLARI_V = 47  # XGI Volari V3XT, V5, V8
    XGI_VOLARI_Z = 48  # XGI Volari Z7
    OMAP1610 = 49  # TI OMAP16xx
    TRIDENT_TGUI = 50  # Trident TGUI
    TRIDENT_3DIMAGE = 51  # Trident 3DImage
    TRIDENT_BLADE3D = 52  # Trident Blade3D
    TRIDENT_BLADEXP = 53  # Trident BladeXP
    CIRRUS_ALPINE = 53  # Cirrus Logic 543x/544x/5480
    NEOMAGIC_NM2070 = 90  # NeoMagic NM2070
    NEOMAGIC_NM2090 = 91  # NeoMagic NM2090
    NEOMAGIC_NM2093 = 92  # NeoMagic NM2093
    NEOMAGIC_NM2097 = 93  # NeoMagic NM2097
    NEOMAGIC_NM2160 = 94  # NeoMagic NM2160
    NEOMAGIC_NM2200 = 95  # NeoMagic NM2200
    NEOMAGIC_NM2230 = 96  # NeoMagic NM2230
    NEOMAGIC_NM2360 = 97  # NeoMagic NM2360
    NEOMAGIC_NM2380 = 98  # NeoMagic NM2380
    PXA3XX = 99  # PXA3xx
    SAVAGE4 = 0x80  # S3 Savage4
    SAVAGE3D = 0x81  # S3 Savage3D
    SAVAGE3D_MV = 0x82  # S3 Savage3D-MV
    SAVAGE2000 = 0x83  # S3 Savage2000
    SAVAGE_MX_MV = 0x84  # S3 Savage/MX-MV
    SAVAGE_MX = 0x85  # S3 Savage/MX
    SAVAGE_IX_MV = 0x86  # S3 Savage/IX-MV
    SAVAGE_IX = 0x87  # S3 Savage/IX
    PROSAVAGE_PM = 0x88  # S3 ProSavage PM133
    PROSAVAGE_KM = 0x89  # S3 ProSavage KM133
    S3TWISTER_P = 0x8A  # S3 Twister
    S3TWISTER_K = 0x8B  # S3 TwisterK
    SUPERSAVAGE = 0x8C  # S3 Supersavage
    PROSAVAGE_DDR = 0x8D  # S3 ProSavage DDR
    PROSAVAGE_DDRK = 0x8E  # S3 ProSavage DDR-K
    PUV3_UNIGFX = 0xA0  # PKUnity-v3 Unigfx


class Activate(enum.IntFlag):
    NOW = 0  # set values immediately (or vbl)
    NXTOPEN = 1  # activate on next open
    TEST = 2  # don't set, round up impossible
    VBL = 16  # activate values on next vbl
    CMAP_VBL = 32  # change colormap on vbl
    ALL = 64  # change all VCs on this fb
    FORCE = 128  # force apply even when no change
    INV_MODE = 256  # invalidate videomode
    KD_TEXT = 512  # for KDSET vt ioctl


class Sync(enum.IntFlag):
    HOR_HIGH_ACT = 1  # horizontal sync high active
    VERT_HIGH_ACT = 2  # vertical sync high active
    EXT = 4  # external sync
    COMP_HIGH_ACT = 8  # composite sync high active
    BROADCAST = 16  # broadcast video timings
    ON_GREEN = 32  # sync on green


class VarMode(enum.IntFlag):
    NONINTERLACED = 0  # noncinterlaced
    INTERLACED = 1  # cinterlaced
    DOUBLE = 2  # double scan
    ODD_FLD_FIRST = 4  # cinterlaced: top line first
    YWRAP = 256  # ywrap instead of panning
    SMOOTH_XPAN = 512  # smooth xpan possible (internally used)
    CONUPDATE = 512  # don't update x/yoffset


class Rotation(enum.IntEnum):
    UR = 0x0
    CW = 0x1
    UD = 0x2
    CCW = 0x3


class VESABlank(enum.IntEnum):
    NO_BLANKING = 0x0
    VSYNC_SUSPEND = 0x1
    HSYNC_SUSPEND = 0x2
    POWERDOWN = 0x3


class VarBlank(enum.IntFlag):
    VBLANKING = 0x001  # currently in a vertical blank
    HBLANKING = 0x002  # currently in a horizontal blank
    HAVE_VBLANK = 0x004  # vertical blanks can be detected
    HAVE_HBLANK = 0x008  # horizontal blanks can be detected
    HAVE_COUNT = 0x010  # global retrace counter is available
    HAVE_VCOUNT = 0x020  # the vcount field is valid
    HAVE_HCOUNT = 0x040  # the hcount field is valid
    VSYNCING = 0x080  # currently in a vsync
    HAVE_VSYNC = 0x100  # verical syncs can be detected


class Cursor(enum.IntFlag):
    SETIMAGE = 0x1
    SETPOS = 0x2
    SETHOT = 0x4
    SETCMAP = 0x8
    SETSHAPE = 0x10
    SETSIZE = 0x20
    SETALL = 0xFF


class Capability(enum.IntFlag):
    FOURCC = 1  # Device supports FOURCC-based formats


class fb_fix_screeninfo(Struct):
    pass


fb_fix_screeninfo._fields_ = [
    ("id", cchar * 16),
    ("smem_start", culong),
    ("smem_len", cuint),
    ("type", cuint),
    ("type_aux", cuint),
    ("visual", cuint),
    ("xpanstep", u16),
    ("ypanstep", u16),
    ("ywrapstep", u16),
    ("line_length", cuint),
    ("mmio_start", culong),
    ("mmio_len", cuint),
    ("accel", cuint),
    ("capabilities", u16),
    ("reserved", u16 * 2),
]


class fb_bitfield(Struct):
    pass


fb_bitfield._fields_ = [("offset", cuint), ("length", cuint), ("msb_right", cuint)]


class fb_var_screeninfo(Struct):
    pass


fb_var_screeninfo._fields_ = [
    ("xres", cuint),
    ("yres", cuint),
    ("xres_virtual", cuint),
    ("yres_virtual", cuint),
    ("xoffset", cuint),
    ("yoffset", cuint),
    ("bits_per_pixel", cuint),
    ("grayscale", cuint),
    ("red", fb_bitfield),
    ("green", fb_bitfield),
    ("blue", fb_bitfield),
    ("transp", fb_bitfield),
    ("nonstd", cuint),
    ("activate", cuint),
    ("height", cuint),
    ("width", cuint),
    ("accel_flags", cuint),
    ("pixclock", cuint),
    ("left_margin", cuint),
    ("right_margin", cuint),
    ("upper_margin", cuint),
    ("lower_margin", cuint),
    ("hsync_len", cuint),
    ("vsync_len", cuint),
    ("sync", cuint),
    ("vmode", cuint),
    ("rotate", cuint),
    ("colorspace", cuint),
    ("reserved", cuint * 4),
]


class fb_cmap(Struct):
    pass


fb_cmap._fields_ = [
    ("start", cuint),
    ("len", cuint),
    ("red", POINTER(u16)),
    ("green", POINTER(u16)),
    ("blue", POINTER(u16)),
    ("transp", POINTER(u16)),
]


class fb_con2fbmap(Struct):
    pass


fb_con2fbmap._fields_ = [("console", cuint), ("framebuffer", cuint)]


class fb_vblank(Struct):
    pass


fb_vblank._fields_ = [("flags", cuint), ("count", cuint), ("vcount", cuint), ("hcount", cuint), ("reserved", cuint * 4)]


class fb_copyarea(Struct):
    pass


fb_copyarea._fields_ = [("dx", cuint), ("dy", cuint), ("width", cuint), ("height", cuint), ("sx", cuint), ("sy", cuint)]


class fb_fillrect(Struct):
    pass


fb_fillrect._fields_ = [
    ("dx", cuint),
    ("dy", cuint),
    ("width", cuint),
    ("height", cuint),
    ("color", cuint),
    ("rop", cuint),
]


class fb_image(Struct):
    pass


fb_image._fields_ = [
    ("dx", cuint),
    ("dy", cuint),
    ("width", cuint),
    ("height", cuint),
    ("fg_color", cuint),
    ("bg_color", cuint),
    ("depth", u8),
    ("data", POINTER(cchar)),
    ("cmap", fb_cmap),
]


class fbcurpos(Struct):
    pass


fbcurpos._fields_ = [("x", u16), ("y", u16)]


class fb_cursor(Struct):
    pass


fb_cursor._fields_ = [
    ("set", u16),
    ("enable", u16),
    ("rop", u16),
    ("mask", POINTER(cchar)),
    ("hot", fbcurpos),
    ("image", fb_image),
]


class IOC(enum.IntEnum):
    GET_VSCREENINFO = 0x4600
    PUT_VSCREENINFO = 0x4601
    GET_FSCREENINFO = 0x4602
    GETCMAP = 0x4604
    PUTCMAP = 0x4605
    PAN_DISPLAY = 0x4606
    _CURSOR = _IOWR("F", 0x08, fb_cursor)
    GET_CON2FBMAP = 0x460F
    PUT_CON2FBMAP = 0x4610
    BLANK = 0x4611  # arg: 0 or vesa level + 1
    GET_VBLANK = _IOR("F", 0x12, fb_vblank)
    _ALLOC = 0x4613
    _FREE = 0x4614
    GET_GLYPH = 0x4615
    GET_HWCINFO = 0x4616
    PUT_MODEINFO = 0x4617
    GET_DISPINFO = 0x4618
    _WAITFORVSYNC = _IOW("F", 0x20, u32)
