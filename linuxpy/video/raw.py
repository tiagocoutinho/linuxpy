#
# This file is part of the linuxpy project
#
# Copyright (c) 2023 Tiago Coutinho
# Distributed under the GPLv3 license. See LICENSE for more info.

# This file has been generated by linuxpy.codegen.video
# Date: 2024-09-09 08:39:26.902597
# System: Linux
# Release: 6.10.6-amd64
# Version: #1 SMP PREEMPT_DYNAMIC Debian 6.10.6-1 (2024-08-19)

import enum

from linuxpy.ctypes import (
    POINTER,
    Struct,
    Union,
    cchar,
    cint,
    clonglong,
    cuint,
    culong,
    culonglong,
    i16,
    timespec,
    timeval,
    u8,
    u16,
    u32,
    u64,
)
from linuxpy.ioctl import IO as _IO, IOR as _IOR, IOW as _IOW, IOWR as _IOWR
from linuxpy.video.util import v4l2_fourcc, v4l2_fourcc_be

v4l2_std_id = u64


class SelectionFlag(enum.IntFlag):
    GE = 1 << 0
    LE = 1 << 1
    KEEP_CONFIG = 1 << 2


class SelectionTarget(enum.IntEnum):
    CROP = 0x0
    CROP_DEFAULT = 0x1
    CROP_BOUNDS = 0x2
    NATIVE_SIZE = 0x3
    COMPOSE = 0x100
    COMPOSE_DEFAULT = 0x101
    COMPOSE_BOUNDS = 0x102
    COMPOSE_PADDED = 0x103
    CROP_ACTIVE = CROP
    COMPOSE_ACTIVE = COMPOSE


class Capability(enum.IntFlag):
    VIDEO_CAPTURE = 0x00000001  # Is a video capture device
    VIDEO_OUTPUT = 0x00000002  # Is a video output device
    VIDEO_OVERLAY = 0x00000004  # Can do video overlay
    VBI_CAPTURE = 0x00000010  # Is a raw VBI capture device
    VBI_OUTPUT = 0x00000020  # Is a raw VBI output device
    SLICED_VBI_CAPTURE = 0x00000040  # Is a sliced VBI capture device
    SLICED_VBI_OUTPUT = 0x00000080  # Is a sliced VBI output device
    RDS_CAPTURE = 0x00000100  # RDS data capture
    VIDEO_OUTPUT_OVERLAY = 0x00000200  # Can do video output overlay
    HW_FREQ_SEEK = 0x00000400  # Can do hardware frequency seek
    RDS_OUTPUT = 0x00000800  # Is an RDS encoder
    VIDEO_CAPTURE_MPLANE = 0x1000
    VIDEO_OUTPUT_MPLANE = 0x2000
    VIDEO_M2M_MPLANE = 0x4000
    VIDEO_M2M = 0x8000
    TUNER = 0x00010000  # has a tuner
    AUDIO = 0x00020000  # has audio support
    RADIO = 0x00040000  # is a radio device
    MODULATOR = 0x00080000  # has a modulator
    SDR_CAPTURE = 0x00100000  # Is a SDR capture device
    EXT_PIX_FORMAT = 0x00200000  # Supports the extended pixel format
    SDR_OUTPUT = 0x00400000  # Is a SDR output device
    META_CAPTURE = 0x00800000  # Is a metadata capture device
    READWRITE = 0x01000000  # read/write systemcalls
    STREAMING = 0x04000000  # streaming I/O ioctls
    META_OUTPUT = 0x08000000  # Is a metadata output device
    TOUCH = 0x10000000  # Is a touch device
    IO_MC = 0x20000000  # Is input/output controlled by the media controller
    DEVICE_CAPS = 0x80000000  # sets device capabilities field
    TIMEPERFRAME = 0x1000  #  timeperframe field is supported
    ASYNCIO = 0x2000000


class PixelFormat(enum.IntEnum):
    RGB332 = v4l2_fourcc("R", "G", "B", "1")  #  8  RGB-3-3-2
    RGB444 = v4l2_fourcc("R", "4", "4", "4")  # 16  xxxxrrrr ggggbbbb
    ARGB444 = v4l2_fourcc("A", "R", "1", "2")  # 16  aaaarrrr ggggbbbb
    XRGB444 = v4l2_fourcc("X", "R", "1", "2")  # 16  xxxxrrrr ggggbbbb
    RGBA444 = v4l2_fourcc("R", "A", "1", "2")  # 16  rrrrgggg bbbbaaaa
    RGBX444 = v4l2_fourcc("R", "X", "1", "2")  # 16  rrrrgggg bbbbxxxx
    ABGR444 = v4l2_fourcc("A", "B", "1", "2")  # 16  aaaabbbb ggggrrrr
    XBGR444 = v4l2_fourcc("X", "B", "1", "2")  # 16  xxxxbbbb ggggrrrr
    BGRA444 = v4l2_fourcc("G", "A", "1", "2")  # 16  bbbbgggg rrrraaaa
    BGRX444 = v4l2_fourcc("B", "X", "1", "2")  # 16  bbbbgggg rrrrxxxx
    RGB555 = v4l2_fourcc("R", "G", "B", "O")  # 16  RGB-5-5-5
    ARGB555 = v4l2_fourcc("A", "R", "1", "5")  # 16  ARGB-1-5-5-5
    XRGB555 = v4l2_fourcc("X", "R", "1", "5")  # 16  XRGB-1-5-5-5
    RGBA555 = v4l2_fourcc("R", "A", "1", "5")  # 16  RGBA-5-5-5-1
    RGBX555 = v4l2_fourcc("R", "X", "1", "5")  # 16  RGBX-5-5-5-1
    ABGR555 = v4l2_fourcc("A", "B", "1", "5")  # 16  ABGR-1-5-5-5
    XBGR555 = v4l2_fourcc("X", "B", "1", "5")  # 16  XBGR-1-5-5-5
    BGRA555 = v4l2_fourcc("B", "A", "1", "5")  # 16  BGRA-5-5-5-1
    BGRX555 = v4l2_fourcc("B", "X", "1", "5")  # 16  BGRX-5-5-5-1
    RGB565 = v4l2_fourcc("R", "G", "B", "P")  # 16  RGB-5-6-5
    RGB555X = v4l2_fourcc("R", "G", "B", "Q")  # 16  RGB-5-5-5 BE
    ARGB555X = v4l2_fourcc_be("A", "R", "1", "5")  # 16  ARGB-5-5-5 BE
    XRGB555X = v4l2_fourcc_be("X", "R", "1", "5")  # 16  XRGB-5-5-5 BE
    RGB565X = v4l2_fourcc("R", "G", "B", "R")  # 16  RGB-5-6-5 BE
    BGR666 = v4l2_fourcc("B", "G", "R", "H")  # 18  BGR-6-6-6
    BGR24 = v4l2_fourcc("B", "G", "R", "3")  # 24  BGR-8-8-8
    RGB24 = v4l2_fourcc("R", "G", "B", "3")  # 24  RGB-8-8-8
    BGR32 = v4l2_fourcc("B", "G", "R", "4")  # 32  BGR-8-8-8-8
    ABGR32 = v4l2_fourcc("A", "R", "2", "4")  # 32  BGRA-8-8-8-8
    XBGR32 = v4l2_fourcc("X", "R", "2", "4")  # 32  BGRX-8-8-8-8
    BGRA32 = v4l2_fourcc("R", "A", "2", "4")  # 32  ABGR-8-8-8-8
    BGRX32 = v4l2_fourcc("R", "X", "2", "4")  # 32  XBGR-8-8-8-8
    RGB32 = v4l2_fourcc("R", "G", "B", "4")  # 32  RGB-8-8-8-8
    RGBA32 = v4l2_fourcc("A", "B", "2", "4")  # 32  RGBA-8-8-8-8
    RGBX32 = v4l2_fourcc("X", "B", "2", "4")  # 32  RGBX-8-8-8-8
    ARGB32 = v4l2_fourcc("B", "A", "2", "4")  # 32  ARGB-8-8-8-8
    XRGB32 = v4l2_fourcc("B", "X", "2", "4")  # 32  XRGB-8-8-8-8
    RGBX1010102 = v4l2_fourcc("R", "X", "3", "0")  # 32  RGBX-10-10-10-2
    RGBA1010102 = v4l2_fourcc("R", "A", "3", "0")  # 32  RGBA-10-10-10-2
    ARGB2101010 = v4l2_fourcc("A", "R", "3", "0")  # 32  ARGB-2-10-10-10
    BGR48_12 = v4l2_fourcc("B", "3", "1", "2")  # 48  BGR 12-bit per component
    ABGR64_12 = v4l2_fourcc("B", "4", "1", "2")  # 64  BGRA 12-bit per component
    GREY = v4l2_fourcc("G", "R", "E", "Y")  #  8  Greyscale
    Y4 = v4l2_fourcc("Y", "0", "4", " ")  #  4  Greyscale
    Y6 = v4l2_fourcc("Y", "0", "6", " ")  #  6  Greyscale
    Y10 = v4l2_fourcc("Y", "1", "0", " ")  # 10  Greyscale
    Y12 = v4l2_fourcc("Y", "1", "2", " ")  # 12  Greyscale
    Y012 = v4l2_fourcc("Y", "0", "1", "2")  # 12  Greyscale
    Y14 = v4l2_fourcc("Y", "1", "4", " ")  # 14  Greyscale
    Y16 = v4l2_fourcc("Y", "1", "6", " ")  # 16  Greyscale
    Y16_BE = v4l2_fourcc_be("Y", "1", "6", " ")  # 16  Greyscale BE
    Y10BPACK = v4l2_fourcc("Y", "1", "0", "B")  # 10  Greyscale bit-packed
    Y10P = v4l2_fourcc("Y", "1", "0", "P")  # 10  Greyscale, MIPI RAW10 packed
    IPU3_Y10 = v4l2_fourcc("i", "p", "3", "y")  # IPU3 packed 10-bit greyscale
    Y12P = v4l2_fourcc("Y", "1", "2", "P")  # 12  Greyscale, MIPI RAW12 packed
    Y14P = v4l2_fourcc("Y", "1", "4", "P")  # 14  Greyscale, MIPI RAW14 packed
    PAL8 = v4l2_fourcc("P", "A", "L", "8")  #  8  8-bit palette
    UV8 = v4l2_fourcc("U", "V", "8", " ")  #  8  UV 4:4
    YUYV = v4l2_fourcc("Y", "U", "Y", "V")  # 16  YUV 4:2:2
    YYUV = v4l2_fourcc("Y", "Y", "U", "V")  # 16  YUV 4:2:2
    YVYU = v4l2_fourcc("Y", "V", "Y", "U")  # 16 YVU 4:2:2
    UYVY = v4l2_fourcc("U", "Y", "V", "Y")  # 16  YUV 4:2:2
    VYUY = v4l2_fourcc("V", "Y", "U", "Y")  # 16  YUV 4:2:2
    Y41P = v4l2_fourcc("Y", "4", "1", "P")  # 12  YUV 4:1:1
    YUV444 = v4l2_fourcc("Y", "4", "4", "4")  # 16  xxxxyyyy uuuuvvvv
    YUV555 = v4l2_fourcc("Y", "U", "V", "O")  # 16  YUV-5-5-5
    YUV565 = v4l2_fourcc("Y", "U", "V", "P")  # 16  YUV-5-6-5
    YUV24 = v4l2_fourcc("Y", "U", "V", "3")  # 24  YUV-8-8-8
    YUV32 = v4l2_fourcc("Y", "U", "V", "4")  # 32  YUV-8-8-8-8
    AYUV32 = v4l2_fourcc("A", "Y", "U", "V")  # 32  AYUV-8-8-8-8
    XYUV32 = v4l2_fourcc("X", "Y", "U", "V")  # 32  XYUV-8-8-8-8
    VUYA32 = v4l2_fourcc("V", "U", "Y", "A")  # 32  VUYA-8-8-8-8
    VUYX32 = v4l2_fourcc("V", "U", "Y", "X")  # 32  VUYX-8-8-8-8
    YUVA32 = v4l2_fourcc("Y", "U", "V", "A")  # 32  YUVA-8-8-8-8
    YUVX32 = v4l2_fourcc("Y", "U", "V", "X")  # 32  YUVX-8-8-8-8
    M420 = v4l2_fourcc("M", "4", "2", "0")  # 12  YUV 4:2:0 2 lines y, 1 line uvcinterleaved
    YUV48_12 = v4l2_fourcc("Y", "3", "1", "2")  # 48  YUV 4:4:4 12-bit per component
    Y210 = v4l2_fourcc("Y", "2", "1", "0")  # 32  YUYV 4:2:2
    Y212 = v4l2_fourcc("Y", "2", "1", "2")  # 32  YUYV 4:2:2
    Y216 = v4l2_fourcc("Y", "2", "1", "6")  # 32  YUYV 4:2:2
    NV12 = v4l2_fourcc("N", "V", "1", "2")  # 12  Y/CbCr 4:2:0
    NV21 = v4l2_fourcc("N", "V", "2", "1")  # 12  Y/CrCb 4:2:0
    NV16 = v4l2_fourcc("N", "V", "1", "6")  # 16  Y/CbCr 4:2:2
    NV61 = v4l2_fourcc("N", "V", "6", "1")  # 16  Y/CrCb 4:2:2
    NV24 = v4l2_fourcc("N", "V", "2", "4")  # 24  Y/CbCr 4:4:4
    NV42 = v4l2_fourcc("N", "V", "4", "2")  # 24  Y/CrCb 4:4:4
    P010 = v4l2_fourcc("P", "0", "1", "0")  # 24  Y/CbCr 4:2:0 10-bit per component
    P012 = v4l2_fourcc("P", "0", "1", "2")  # 24  Y/CbCr 4:2:0 12-bit per component
    NV12M = v4l2_fourcc("N", "M", "1", "2")  # 12  Y/CbCr 4:2:0
    NV21M = v4l2_fourcc("N", "M", "2", "1")  # 21  Y/CrCb 4:2:0
    NV16M = v4l2_fourcc("N", "M", "1", "6")  # 16  Y/CbCr 4:2:2
    NV61M = v4l2_fourcc("N", "M", "6", "1")  # 16  Y/CrCb 4:2:2
    P012M = v4l2_fourcc("P", "M", "1", "2")  # 24  Y/CbCr 4:2:0 12-bit per component
    YUV410 = v4l2_fourcc("Y", "U", "V", "9")  #  9  YUV 4:1:0
    YVU410 = v4l2_fourcc("Y", "V", "U", "9")  #  9  YVU 4:1:0
    YUV411P = v4l2_fourcc("4", "1", "1", "P")  # 12  YVU411 planar
    YUV420 = v4l2_fourcc("Y", "U", "1", "2")  # 12  YUV 4:2:0
    YVU420 = v4l2_fourcc("Y", "V", "1", "2")  # 12  YVU 4:2:0
    YUV422P = v4l2_fourcc("4", "2", "2", "P")  # 16  YVU422 planar
    YUV420M = v4l2_fourcc("Y", "M", "1", "2")  # 12  YUV420 planar
    YVU420M = v4l2_fourcc("Y", "M", "2", "1")  # 12  YVU420 planar
    YUV422M = v4l2_fourcc("Y", "M", "1", "6")  # 16  YUV422 planar
    YVU422M = v4l2_fourcc("Y", "M", "6", "1")  # 16  YVU422 planar
    YUV444M = v4l2_fourcc("Y", "M", "2", "4")  # 24  YUV444 planar
    YVU444M = v4l2_fourcc("Y", "M", "4", "2")  # 24  YVU444 planar
    NV12_4L4 = v4l2_fourcc("V", "T", "1", "2")  # 12  Y/CbCr 4:2:0  4x4 tiles
    NV12_16L16 = v4l2_fourcc("H", "M", "1", "2")  # 12  Y/CbCr 4:2:0 16x16 tiles
    NV12_32L32 = v4l2_fourcc("S", "T", "1", "2")  # 12  Y/CbCr 4:2:0 32x32 tiles
    NV15_4L4 = v4l2_fourcc("V", "T", "1", "5")  # 15 Y/CbCr 4:2:0 10-bit 4x4 tiles
    P010_4L4 = v4l2_fourcc("T", "0", "1", "0")  # 12  Y/CbCr 4:2:0 10-bit 4x4 macroblocks
    NV12_8L128 = v4l2_fourcc("A", "T", "1", "2")  # Y/CbCr 4:2:0 8x128 tiles
    NV12_10BE_8L128 = v4l2_fourcc_be("A", "X", "1", "2")  # Y/CbCr 4:2:0 10-bit 8x128 tiles
    NV12MT = v4l2_fourcc("T", "M", "1", "2")  # 12  Y/CbCr 4:2:0 64x32 tiles
    NV12MT_16X16 = v4l2_fourcc("V", "M", "1", "2")  # 12  Y/CbCr 4:2:0 16x16 tiles
    NV12M_8L128 = v4l2_fourcc("N", "A", "1", "2")  # Y/CbCr 4:2:0 8x128 tiles
    NV12M_10BE_8L128 = v4l2_fourcc_be("N", "T", "1", "2")  # Y/CbCr 4:2:0 10-bit 8x128 tiles
    SBGGR8 = v4l2_fourcc("B", "A", "8", "1")  #  8  BGBG.. GRGR..
    SGBRG8 = v4l2_fourcc("G", "B", "R", "G")  #  8  GBGB.. RGRG..
    SGRBG8 = v4l2_fourcc("G", "R", "B", "G")  #  8  GRGR.. BGBG..
    SRGGB8 = v4l2_fourcc("R", "G", "G", "B")  #  8  RGRG.. GBGB..
    SBGGR10 = v4l2_fourcc("B", "G", "1", "0")  # 10  BGBG.. GRGR..
    SGBRG10 = v4l2_fourcc("G", "B", "1", "0")  # 10  GBGB.. RGRG..
    SGRBG10 = v4l2_fourcc("B", "A", "1", "0")  # 10  GRGR.. BGBG..
    SRGGB10 = v4l2_fourcc("R", "G", "1", "0")  # 10  RGRG.. GBGB..
    SBGGR10P = v4l2_fourcc("p", "B", "A", "A")
    SGBRG10P = v4l2_fourcc("p", "G", "A", "A")
    SGRBG10P = v4l2_fourcc("p", "g", "A", "A")
    SRGGB10P = v4l2_fourcc("p", "R", "A", "A")
    SBGGR10ALAW8 = v4l2_fourcc("a", "B", "A", "8")
    SGBRG10ALAW8 = v4l2_fourcc("a", "G", "A", "8")
    SGRBG10ALAW8 = v4l2_fourcc("a", "g", "A", "8")
    SRGGB10ALAW8 = v4l2_fourcc("a", "R", "A", "8")
    SBGGR10DPCM8 = v4l2_fourcc("b", "B", "A", "8")
    SGBRG10DPCM8 = v4l2_fourcc("b", "G", "A", "8")
    SGRBG10DPCM8 = v4l2_fourcc("B", "D", "1", "0")
    SRGGB10DPCM8 = v4l2_fourcc("b", "R", "A", "8")
    SBGGR12 = v4l2_fourcc("B", "G", "1", "2")  # 12  BGBG.. GRGR..
    SGBRG12 = v4l2_fourcc("G", "B", "1", "2")  # 12  GBGB.. RGRG..
    SGRBG12 = v4l2_fourcc("B", "A", "1", "2")  # 12  GRGR.. BGBG..
    SRGGB12 = v4l2_fourcc("R", "G", "1", "2")  # 12  RGRG.. GBGB..
    SBGGR12P = v4l2_fourcc("p", "B", "C", "C")
    SGBRG12P = v4l2_fourcc("p", "G", "C", "C")
    SGRBG12P = v4l2_fourcc("p", "g", "C", "C")
    SRGGB12P = v4l2_fourcc("p", "R", "C", "C")
    SBGGR14 = v4l2_fourcc("B", "G", "1", "4")  # 14  BGBG.. GRGR..
    SGBRG14 = v4l2_fourcc("G", "B", "1", "4")  # 14  GBGB.. RGRG..
    SGRBG14 = v4l2_fourcc("G", "R", "1", "4")  # 14  GRGR.. BGBG..
    SRGGB14 = v4l2_fourcc("R", "G", "1", "4")  # 14  RGRG.. GBGB..
    SBGGR14P = v4l2_fourcc("p", "B", "E", "E")
    SGBRG14P = v4l2_fourcc("p", "G", "E", "E")
    SGRBG14P = v4l2_fourcc("p", "g", "E", "E")
    SRGGB14P = v4l2_fourcc("p", "R", "E", "E")
    SBGGR16 = v4l2_fourcc("B", "Y", "R", "2")  # 16  BGBG.. GRGR..
    SGBRG16 = v4l2_fourcc("G", "B", "1", "6")  # 16  GBGB.. RGRG..
    SGRBG16 = v4l2_fourcc("G", "R", "1", "6")  # 16  GRGR.. BGBG..
    SRGGB16 = v4l2_fourcc("R", "G", "1", "6")  # 16  RGRG.. GBGB..
    HSV24 = v4l2_fourcc("H", "S", "V", "3")
    HSV32 = v4l2_fourcc("H", "S", "V", "4")
    MJPEG = v4l2_fourcc("M", "J", "P", "G")  # Motion-JPEG
    JPEG = v4l2_fourcc("J", "P", "E", "G")  # JFIF JPEG
    DV = v4l2_fourcc("d", "v", "s", "d")  # 1394
    MPEG = v4l2_fourcc("M", "P", "E", "G")  # MPEG-1/2/4 Multiplexed
    H264 = v4l2_fourcc("H", "2", "6", "4")  # H264 with start codes
    H264_NO_SC = v4l2_fourcc("A", "V", "C", "1")  # H264 without start codes
    H264_MVC = v4l2_fourcc("M", "2", "6", "4")  # H264 MVC
    H263 = v4l2_fourcc("H", "2", "6", "3")  # H263
    MPEG1 = v4l2_fourcc("M", "P", "G", "1")  # MPEG-1 ES
    MPEG2 = v4l2_fourcc("M", "P", "G", "2")  # MPEG-2 ES
    MPEG2_SLICE = v4l2_fourcc("M", "G", "2", "S")  # MPEG-2 parsed slice data
    MPEG4 = v4l2_fourcc("M", "P", "G", "4")  # MPEG-4 part 2 ES
    XVID = v4l2_fourcc("X", "V", "I", "D")  # Xvid
    VC1_ANNEX_G = v4l2_fourcc("V", "C", "1", "G")  # SMPTE 421M Annex G compliant stream
    VC1_ANNEX_L = v4l2_fourcc("V", "C", "1", "L")  # SMPTE 421M Annex L compliant stream
    VP8 = v4l2_fourcc("V", "P", "8", "0")  # VP8
    VP8_FRAME = v4l2_fourcc("V", "P", "8", "F")  # VP8 parsed frame
    VP9 = v4l2_fourcc("V", "P", "9", "0")  # VP9
    VP9_FRAME = v4l2_fourcc("V", "P", "9", "F")  # VP9 parsed frame
    HEVC = v4l2_fourcc("H", "E", "V", "C")  # HEVC aka H.265
    FWHT = v4l2_fourcc("F", "W", "H", "T")  # Fast Walsh Hadamard Transform (vicodec)
    FWHT_STATELESS = v4l2_fourcc("S", "F", "W", "H")  # Stateless FWHT (vicodec)
    H264_SLICE = v4l2_fourcc("S", "2", "6", "4")  # H264 parsed slices
    HEVC_SLICE = v4l2_fourcc("S", "2", "6", "5")  # HEVC parsed slices
    AV1_FRAME = v4l2_fourcc("A", "V", "1", "F")  # AV1 parsed frame
    SPK = v4l2_fourcc("S", "P", "K", "0")  # Sorenson Spark
    RV30 = v4l2_fourcc("R", "V", "3", "0")  # RealVideo 8
    RV40 = v4l2_fourcc("R", "V", "4", "0")  # RealVideo 9 & 10
    CPIA1 = v4l2_fourcc("C", "P", "I", "A")  # cpia1 YUV
    WNVA = v4l2_fourcc("W", "N", "V", "A")  # Winnov hw compress
    SN9C10X = v4l2_fourcc("S", "9", "1", "0")  # SN9C10x compression
    SN9C20X_I420 = v4l2_fourcc("S", "9", "2", "0")  # SN9C20x YUV 4:2:0
    PWC1 = v4l2_fourcc("P", "W", "C", "1")  # pwc older webcam
    PWC2 = v4l2_fourcc("P", "W", "C", "2")  # pwc newer webcam
    ET61X251 = v4l2_fourcc("E", "6", "2", "5")  # ET61X251 compression
    SPCA501 = v4l2_fourcc("S", "5", "0", "1")  # YUYV per line
    SPCA505 = v4l2_fourcc("S", "5", "0", "5")  # YYUV per line
    SPCA508 = v4l2_fourcc("S", "5", "0", "8")  # YUVY per line
    SPCA561 = v4l2_fourcc("S", "5", "6", "1")  # compressed GBRG bayer
    PAC207 = v4l2_fourcc("P", "2", "0", "7")  # compressed BGGR bayer
    MR97310A = v4l2_fourcc("M", "3", "1", "0")  # compressed BGGR bayer
    JL2005BCD = v4l2_fourcc("J", "L", "2", "0")  # compressed RGGB bayer
    SN9C2028 = v4l2_fourcc("S", "O", "N", "X")  # compressed GBRG bayer
    SQ905C = v4l2_fourcc("9", "0", "5", "C")  # compressed RGGB bayer
    PJPG = v4l2_fourcc("P", "J", "P", "G")  # Pixart 73xx JPEG
    OV511 = v4l2_fourcc("O", "5", "1", "1")  # ov511 JPEG
    OV518 = v4l2_fourcc("O", "5", "1", "8")  # ov518 JPEG
    STV0680 = v4l2_fourcc("S", "6", "8", "0")  # stv0680 bayer
    TM6000 = v4l2_fourcc("T", "M", "6", "0")  # tm5600/tm60x0
    CIT_YYVYUY = v4l2_fourcc("C", "I", "T", "V")  # one line of Y then 1 line of VYUY
    KONICA420 = v4l2_fourcc("K", "O", "N", "I")  # YUV420 planar in blocks of 256 pixels
    JPGL = v4l2_fourcc("J", "P", "G", "L")  # JPEG-Lite
    SE401 = v4l2_fourcc("S", "4", "0", "1")  # se401 janggu compressed rgb
    S5C_UYVY_JPG = v4l2_fourcc("S", "5", "C", "I")  # S5C73M3cinterleaved UYVY/JPEG
    Y8I = v4l2_fourcc("Y", "8", "I", " ")  # Greyscale 8-bit L/Rcinterleaved
    Y12I = v4l2_fourcc("Y", "1", "2", "I")  # Greyscale 12-bit L/Rcinterleaved
    Z16 = v4l2_fourcc("Z", "1", "6", " ")  # Depth data 16-bit
    MT21C = v4l2_fourcc("M", "T", "2", "1")  # Mediatek compressed block mode
    MM21 = v4l2_fourcc("M", "M", "2", "1")  # Mediatek 8-bit block mode, two non-contiguous planes
    MT2110T = v4l2_fourcc("M", "T", "2", "T")  # Mediatek 10-bit block tile mode
    MT2110R = v4l2_fourcc("M", "T", "2", "R")  # Mediatek 10-bit block raster mode
    INZI = v4l2_fourcc("I", "N", "Z", "I")  # Intel Planar Greyscale 10-bit and Depth 16-bit
    CNF4 = v4l2_fourcc("C", "N", "F", "4")  # Intel 4-bit packed depth confidence information
    HI240 = v4l2_fourcc("H", "I", "2", "4")  # BTTV 8-bit dithered RGB
    QC08C = v4l2_fourcc("Q", "0", "8", "C")  # Qualcomm 8-bit compressed
    QC10C = v4l2_fourcc("Q", "1", "0", "C")  # Qualcomm 10-bit compressed
    AJPG = v4l2_fourcc("A", "J", "P", "G")  # Aspeed JPEG
    HEXTILE = v4l2_fourcc("H", "X", "T", "L")  # Hextile compressed
    IPU3_SBGGR10 = v4l2_fourcc("i", "p", "3", "b")  # IPU3 packed 10-bit BGGR bayer
    IPU3_SGBRG10 = v4l2_fourcc("i", "p", "3", "g")  # IPU3 packed 10-bit GBRG bayer
    IPU3_SGRBG10 = v4l2_fourcc("i", "p", "3", "G")  # IPU3 packed 10-bit GRBG bayer
    IPU3_SRGGB10 = v4l2_fourcc("i", "p", "3", "r")  # IPU3 packed 10-bit RGGB bayer
    PRIV_MAGIC = 0xFEEDCAFE
    FLAG_PREMUL_ALPHA = 0x1
    FLAG_SET_CSC = 0x2
    HM12 = NV12_16L16
    SUNXI_TILED_NV12 = NV12_32L32


class MetaFormat(enum.IntEnum):
    VSP1_HGO = v4l2_fourcc("V", "S", "P", "H")  # R-Car VSP1 1-D Histogram
    VSP1_HGT = v4l2_fourcc("V", "S", "P", "T")  # R-Car VSP1 2-D Histogram
    UVC = v4l2_fourcc("U", "V", "C", "H")  # UVC Payload Header metadata
    D4XX = v4l2_fourcc("D", "4", "X", "X")  # D4XX Payload Header metadata
    VIVID = v4l2_fourcc("V", "I", "V", "D")  # Vivid Metadata
    RK_ISP1_PARAMS = v4l2_fourcc("R", "K", "1", "P")  # Rockchip ISP1 3A Parameters
    RK_ISP1_STAT_3A = v4l2_fourcc("R", "K", "1", "S")  # Rockchip ISP1 3A Statistics


class TouchFormat(enum.IntEnum):
    DELTA_TD16 = v4l2_fourcc("T", "D", "1", "6")  # 16-bit signed deltas
    DELTA_TD08 = v4l2_fourcc("T", "D", "0", "8")  # 8-bit signed deltas
    TU16 = v4l2_fourcc("T", "U", "1", "6")  # 16-bit unsigned touch data
    TU08 = v4l2_fourcc("T", "U", "0", "8")  # 8-bit unsigned touch data


class SDRFormat(enum.IntEnum):
    CU8 = v4l2_fourcc("C", "U", "0", "8")  # IQ u8
    CU16LE = v4l2_fourcc("C", "U", "1", "6")  # IQ u16le
    CS8 = v4l2_fourcc("C", "S", "0", "8")  # complex s8
    CS14LE = v4l2_fourcc("C", "S", "1", "4")  # complex s14le
    RU12LE = v4l2_fourcc("R", "U", "1", "2")  # real u12le
    PCU16BE = v4l2_fourcc("P", "C", "1", "6")  # planar complex u16be
    PCU18BE = v4l2_fourcc("P", "C", "1", "8")  # planar complex u18be
    PCU20BE = v4l2_fourcc("P", "C", "2", "0")  # planar complex u20be


class BufferFlag(enum.IntFlag):
    MAPPED = 0x1
    QUEUED = 0x2
    DONE = 0x4
    KEYFRAME = 0x8
    PFRAME = 0x10
    BFRAME = 0x20
    ERROR = 0x40
    IN_REQUEST = 0x80
    TIMECODE = 0x100
    M2M_HOLD_CAPTURE_BUF = 0x200
    PREPARED = 0x400
    NO_CACHE_INVALIDATE = 0x800
    NO_CACHE_CLEAN = 0x1000
    TIMESTAMP_MASK = 0xE000
    TIMESTAMP_UNKNOWN = 0x0
    TIMESTAMP_MONOTONIC = 0x2000
    TIMESTAMP_COPY = 0x4000
    TSTAMP_SRC_MASK = 0x70000
    TSTAMP_SRC_EOF = 0x0
    TSTAMP_SRC_SOE = 0x10000
    LAST = 0x100000
    REQUEST_FD = 0x800000


class ImageFormatFlag(enum.IntFlag):
    COMPRESSED = 0x1
    EMULATED = 0x2
    CONTINUOUS_BYTESTREAM = 0x4
    DYN_RESOLUTION = 0x8
    ENC_CAP_FRAME_INTERVAL = 0x10
    CSC_COLORSPACE = 0x20
    CSC_XFER_FUNC = 0x40
    CSC_YCBCR_ENC = 0x80
    CSC_HSV_ENC = CSC_YCBCR_ENC
    CSC_QUANTIZATION = 0x100
    META_LINE_BASED = 0x200


class InputStatus(enum.IntFlag):
    NO_POWER = 0x00000001  # Attached device is off
    NO_SIGNAL = 0x2
    NO_COLOR = 0x4
    HFLIP = 0x00000010  # Frames are flipped horizontally
    VFLIP = 0x00000020  # Frames are flipped vertically
    NO_H_LOCK = 0x00000100  # No horizontal sync lock
    COLOR_KILL = 0x00000200  # Color killer is active
    NO_V_LOCK = 0x00000400  # No vertical sync lock
    NO_STD_LOCK = 0x00000800  # No standard format lock
    NO_SYNC = 0x00010000  # No synchronization lock
    NO_EQU = 0x00020000  # No equalizer lock
    NO_CARRIER = 0x00040000  # Carrier recovery failed
    MACROVISION = 0x01000000  # Macrovision detected
    NO_ACCESS = 0x02000000  # Conditional access denied
    VTR = 0x04000000  # VTR time constant


class InputType(enum.IntEnum):
    TUNER = 0x1
    CAMERA = 0x2
    TOUCH = 0x3


class OutputType(enum.IntEnum):
    MODULATOR = 0x1
    ANALOG = 0x2
    ANALOGVGAOVERLAY = 0x3


class InputCapabilities(enum.IntFlag):
    DV_TIMINGS = 0x00000002  # Supports S_DV_TIMINGS
    CUSTOM_TIMINGS = DV_TIMINGS  # For compatibility
    STD = 0x00000004  # Supports S_STD
    NATIVE_SIZE = 0x00000008  # Supports setting native size


class OutputCapabilities(enum.IntFlag):
    DV_TIMINGS = 0x00000002  # Supports S_DV_TIMINGS
    CUSTOM_TIMINGS = DV_TIMINGS  # For compatibility
    STD = 0x00000004  # Supports S_STD
    NATIVE_SIZE = 0x00000008  # Supports setting native size


class ControlClass(enum.IntEnum):
    USER = 0x00980000  # Old-style 'user' controls
    CODEC = 0x00990000  # Stateful codec controls
    CAMERA = 0x009A0000  # Camera class controls
    FM_TX = 0x009B0000  # FM Modulator controls
    FLASH = 0x009C0000  # Camera flash controls
    JPEG = 0x009D0000  # JPEG-compression controls
    IMAGE_SOURCE = 0x009E0000  # Image source controls
    IMAGE_PROC = 0x009F0000  # Image processing controls
    DV = 0x00A00000  # Digital Video controls
    FM_RX = 0x00A10000  # FM Receiver controls
    RF_TUNER = 0x00A20000  # RF tuner controls
    DETECT = 0x00A30000  # Detection controls
    CODEC_STATELESS = 0x00A40000  # Stateless codecs controls
    COLORIMETRY = 0x00A50000  # Colorimetry controls
    MPEG = CODEC


class ControlID(enum.IntEnum):
    BASE = ControlClass.USER | 0x900
    USER_BASE = BASE
    USER_CLASS = ControlClass.USER | 1
    BRIGHTNESS = BASE + 0
    CONTRAST = BASE + 1
    SATURATION = BASE + 2
    HUE = BASE + 3
    AUDIO_VOLUME = BASE + 5
    AUDIO_BALANCE = BASE + 6
    AUDIO_BASS = BASE + 7
    AUDIO_TREBLE = BASE + 8
    AUDIO_MUTE = BASE + 9
    AUDIO_LOUDNESS = BASE + 10
    BLACK_LEVEL = BASE + 11  # Deprecated
    AUTO_WHITE_BALANCE = BASE + 12
    DO_WHITE_BALANCE = BASE + 13
    RED_BALANCE = BASE + 14
    BLUE_BALANCE = BASE + 15
    GAMMA = BASE + 16
    WHITENESS = GAMMA  # Deprecated
    EXPOSURE = BASE + 17
    AUTOGAIN = BASE + 18
    GAIN = BASE + 19
    HFLIP = BASE + 20
    VFLIP = BASE + 21
    POWER_LINE_FREQUENCY = BASE + 24
    HUE_AUTO = BASE + 25
    WHITE_BALANCE_TEMPERATURE = BASE + 26
    SHARPNESS = BASE + 27
    BACKLIGHT_COMPENSATION = BASE + 28
    CHROMA_AGC = BASE + 29
    COLOR_KILLER = BASE + 30
    COLORFX = BASE + 31
    AUTOBRIGHTNESS = BASE + 32
    BAND_STOP_FILTER = BASE + 33
    ROTATE = BASE + 34
    BG_COLOR = BASE + 35
    CHROMA_GAIN = BASE + 36
    ILLUMINATORS_1 = BASE + 37
    ILLUMINATORS_2 = BASE + 38
    MIN_BUFFERS_FOR_CAPTURE = BASE + 39
    MIN_BUFFERS_FOR_OUTPUT = BASE + 40
    ALPHA_COMPONENT = BASE + 41
    COLORFX_CBCR = BASE + 42
    COLORFX_RGB = BASE + 43
    LASTP1 = BASE + 44
    USER_MEYE_BASE = USER_BASE + 0x1000
    USER_BTTV_BASE = USER_BASE + 0x1010
    USER_S2255_BASE = USER_BASE + 0x1030
    USER_SI476X_BASE = USER_BASE + 0x1040
    USER_TI_VPE_BASE = USER_BASE + 0x1050
    USER_SAA7134_BASE = USER_BASE + 0x1060
    USER_ADV7180_BASE = USER_BASE + 0x1070
    USER_TC358743_BASE = USER_BASE + 0x1080
    USER_MAX217X_BASE = USER_BASE + 0x1090
    USER_IMX_BASE = USER_BASE + 0x10B0
    USER_ATMEL_ISC_BASE = USER_BASE + 0x10C0
    USER_CODA_BASE = USER_BASE + 0x10E0
    USER_CCS_BASE = USER_BASE + 0x10F0
    USER_ALLEGRO_BASE = USER_BASE + 0x1170
    USER_ISL7998X_BASE = USER_BASE + 0x1180
    USER_DW100_BASE = USER_BASE + 0x1190
    USER_ASPEED_BASE = USER_BASE + 0x11A0
    USER_NPCM_BASE = USER_BASE + 0x11B0
    USER_THP7312_BASE = USER_BASE + 0x11C0
    CODEC_BASE = ControlClass.CODEC | 0x900
    CODEC_CLASS = ControlClass.CODEC | 1
    MPEG_STREAM_TYPE = CODEC_BASE + 0
    MPEG_STREAM_PID_PMT = CODEC_BASE + 1
    MPEG_STREAM_PID_AUDIO = CODEC_BASE + 2
    MPEG_STREAM_PID_VIDEO = CODEC_BASE + 3
    MPEG_STREAM_PID_PCR = CODEC_BASE + 4
    MPEG_STREAM_PES_ID_AUDIO = CODEC_BASE + 5
    MPEG_STREAM_PES_ID_VIDEO = CODEC_BASE + 6
    MPEG_STREAM_VBI_FMT = CODEC_BASE + 7
    MPEG_AUDIO_SAMPLING_FREQ = CODEC_BASE + 100
    MPEG_AUDIO_ENCODING = CODEC_BASE + 101
    MPEG_AUDIO_L1_BITRATE = CODEC_BASE + 102
    MPEG_AUDIO_L2_BITRATE = CODEC_BASE + 103
    MPEG_AUDIO_L3_BITRATE = CODEC_BASE + 104
    MPEG_AUDIO_MODE = CODEC_BASE + 105
    MPEG_AUDIO_MODE_EXTENSION = CODEC_BASE + 106
    MPEG_AUDIO_EMPHASIS = CODEC_BASE + 107
    MPEG_AUDIO_CRC = CODEC_BASE + 108
    MPEG_AUDIO_MUTE = CODEC_BASE + 109
    MPEG_AUDIO_AAC_BITRATE = CODEC_BASE + 110
    MPEG_AUDIO_AC3_BITRATE = CODEC_BASE + 111
    MPEG_AUDIO_DEC_PLAYBACK = CODEC_BASE + 112
    MPEG_AUDIO_DEC_MULTILINGUAL_PLAYBACK = CODEC_BASE + 113
    MPEG_VIDEO_ENCODING = CODEC_BASE + 200
    MPEG_VIDEO_ASPECT = CODEC_BASE + 201
    MPEG_VIDEO_B_FRAMES = CODEC_BASE + 202
    MPEG_VIDEO_GOP_SIZE = CODEC_BASE + 203
    MPEG_VIDEO_GOP_CLOSURE = CODEC_BASE + 204
    MPEG_VIDEO_PULLDOWN = CODEC_BASE + 205
    MPEG_VIDEO_BITRATE_MODE = CODEC_BASE + 206
    MPEG_VIDEO_BITRATE = CODEC_BASE + 207
    MPEG_VIDEO_BITRATE_PEAK = CODEC_BASE + 208
    MPEG_VIDEO_TEMPORAL_DECIMATION = CODEC_BASE + 209
    MPEG_VIDEO_MUTE = CODEC_BASE + 210
    MPEG_VIDEO_MUTE_YUV = CODEC_BASE + 211
    MPEG_VIDEO_DECODER_SLICE_INTERFACE = CODEC_BASE + 212
    MPEG_VIDEO_DECODER_MPEG4_DEBLOCK_FILTER = CODEC_BASE + 213
    MPEG_VIDEO_CYCLIC_INTRA_REFRESH_MB = CODEC_BASE + 214
    MPEG_VIDEO_FRAME_RC_ENABLE = CODEC_BASE + 215
    MPEG_VIDEO_HEADER_MODE = CODEC_BASE + 216
    MPEG_VIDEO_MAX_REF_PIC = CODEC_BASE + 217
    MPEG_VIDEO_MB_RC_ENABLE = CODEC_BASE + 218
    MPEG_VIDEO_MULTI_SLICE_MAX_BYTES = CODEC_BASE + 219
    MPEG_VIDEO_MULTI_SLICE_MAX_MB = CODEC_BASE + 220
    MPEG_VIDEO_MULTI_SLICE_MODE = CODEC_BASE + 221
    MPEG_VIDEO_VBV_SIZE = CODEC_BASE + 222
    MPEG_VIDEO_DEC_PTS = CODEC_BASE + 223
    MPEG_VIDEO_DEC_FRAME = CODEC_BASE + 224
    MPEG_VIDEO_VBV_DELAY = CODEC_BASE + 225
    MPEG_VIDEO_REPEAT_SEQ_HEADER = CODEC_BASE + 226
    MPEG_VIDEO_MV_H_SEARCH_RANGE = CODEC_BASE + 227
    MPEG_VIDEO_MV_V_SEARCH_RANGE = CODEC_BASE + 228
    MPEG_VIDEO_FORCE_KEY_FRAME = CODEC_BASE + 229
    MPEG_VIDEO_BASELAYER_PRIORITY_ID = CODEC_BASE + 230
    MPEG_VIDEO_AU_DELIMITER = CODEC_BASE + 231
    MPEG_VIDEO_LTR_COUNT = CODEC_BASE + 232
    MPEG_VIDEO_FRAME_LTR_INDEX = CODEC_BASE + 233
    MPEG_VIDEO_USE_LTR_FRAMES = CODEC_BASE + 234
    MPEG_VIDEO_DEC_CONCEAL_COLOR = CODEC_BASE + 235
    MPEG_VIDEO_INTRA_REFRESH_PERIOD = CODEC_BASE + 236
    MPEG_VIDEO_INTRA_REFRESH_PERIOD_TYPE = CODEC_BASE + 237
    MPEG_VIDEO_MPEG2_LEVEL = CODEC_BASE + 270
    MPEG_VIDEO_MPEG2_PROFILE = CODEC_BASE + 271
    FWHT_I_FRAME_QP = CODEC_BASE + 290
    FWHT_P_FRAME_QP = CODEC_BASE + 291
    MPEG_VIDEO_H263_I_FRAME_QP = CODEC_BASE + 300
    MPEG_VIDEO_H263_P_FRAME_QP = CODEC_BASE + 301
    MPEG_VIDEO_H263_B_FRAME_QP = CODEC_BASE + 302
    MPEG_VIDEO_H263_MIN_QP = CODEC_BASE + 303
    MPEG_VIDEO_H263_MAX_QP = CODEC_BASE + 304
    MPEG_VIDEO_H264_I_FRAME_QP = CODEC_BASE + 350
    MPEG_VIDEO_H264_P_FRAME_QP = CODEC_BASE + 351
    MPEG_VIDEO_H264_B_FRAME_QP = CODEC_BASE + 352
    MPEG_VIDEO_H264_MIN_QP = CODEC_BASE + 353
    MPEG_VIDEO_H264_MAX_QP = CODEC_BASE + 354
    MPEG_VIDEO_H264_8X8_TRANSFORM = CODEC_BASE + 355
    MPEG_VIDEO_H264_CPB_SIZE = CODEC_BASE + 356
    MPEG_VIDEO_H264_ENTROPY_MODE = CODEC_BASE + 357
    MPEG_VIDEO_H264_I_PERIOD = CODEC_BASE + 358
    MPEG_VIDEO_H264_LEVEL = CODEC_BASE + 359
    MPEG_VIDEO_H264_LOOP_FILTER_ALPHA = CODEC_BASE + 360
    MPEG_VIDEO_H264_LOOP_FILTER_BETA = CODEC_BASE + 361
    MPEG_VIDEO_H264_LOOP_FILTER_MODE = CODEC_BASE + 362
    MPEG_VIDEO_H264_PROFILE = CODEC_BASE + 363
    MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT = CODEC_BASE + 364
    MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH = CODEC_BASE + 365
    MPEG_VIDEO_H264_VUI_SAR_ENABLE = CODEC_BASE + 366
    MPEG_VIDEO_H264_VUI_SAR_IDC = CODEC_BASE + 367
    MPEG_VIDEO_H264_SEI_FRAME_PACKING = CODEC_BASE + 368
    MPEG_VIDEO_H264_SEI_FP_CURRENT_FRAME_0 = CODEC_BASE + 369
    MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE = CODEC_BASE + 370
    MPEG_VIDEO_H264_FMO = CODEC_BASE + 371
    MPEG_VIDEO_H264_FMO_MAP_TYPE = CODEC_BASE + 372
    MPEG_VIDEO_H264_FMO_SLICE_GROUP = CODEC_BASE + 373
    MPEG_VIDEO_H264_FMO_CHANGE_DIRECTION = CODEC_BASE + 374
    MPEG_VIDEO_H264_FMO_CHANGE_RATE = CODEC_BASE + 375
    MPEG_VIDEO_H264_FMO_RUN_LENGTH = CODEC_BASE + 376
    MPEG_VIDEO_H264_ASO = CODEC_BASE + 377
    MPEG_VIDEO_H264_ASO_SLICE_ORDER = CODEC_BASE + 378
    MPEG_VIDEO_H264_HIERARCHICAL_CODING = CODEC_BASE + 379
    MPEG_VIDEO_H264_HIERARCHICAL_CODING_TYPE = CODEC_BASE + 380
    MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER = CODEC_BASE + 381
    MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER_QP = CODEC_BASE + 382
    MPEG_VIDEO_H264_CONSTRAINED_INTRA_PREDICTION = CODEC_BASE + 383
    MPEG_VIDEO_H264_CHROMA_QP_INDEX_OFFSET = CODEC_BASE + 384
    MPEG_VIDEO_H264_I_FRAME_MIN_QP = CODEC_BASE + 385
    MPEG_VIDEO_H264_I_FRAME_MAX_QP = CODEC_BASE + 386
    MPEG_VIDEO_H264_P_FRAME_MIN_QP = CODEC_BASE + 387
    MPEG_VIDEO_H264_P_FRAME_MAX_QP = CODEC_BASE + 388
    MPEG_VIDEO_H264_B_FRAME_MIN_QP = CODEC_BASE + 389
    MPEG_VIDEO_H264_B_FRAME_MAX_QP = CODEC_BASE + 390
    MPEG_VIDEO_H264_HIER_CODING_L0_BR = CODEC_BASE + 391
    MPEG_VIDEO_H264_HIER_CODING_L1_BR = CODEC_BASE + 392
    MPEG_VIDEO_H264_HIER_CODING_L2_BR = CODEC_BASE + 393
    MPEG_VIDEO_H264_HIER_CODING_L3_BR = CODEC_BASE + 394
    MPEG_VIDEO_H264_HIER_CODING_L4_BR = CODEC_BASE + 395
    MPEG_VIDEO_H264_HIER_CODING_L5_BR = CODEC_BASE + 396
    MPEG_VIDEO_H264_HIER_CODING_L6_BR = CODEC_BASE + 397
    MPEG_VIDEO_MPEG4_I_FRAME_QP = CODEC_BASE + 400
    MPEG_VIDEO_MPEG4_P_FRAME_QP = CODEC_BASE + 401
    MPEG_VIDEO_MPEG4_B_FRAME_QP = CODEC_BASE + 402
    MPEG_VIDEO_MPEG4_MIN_QP = CODEC_BASE + 403
    MPEG_VIDEO_MPEG4_MAX_QP = CODEC_BASE + 404
    MPEG_VIDEO_MPEG4_LEVEL = CODEC_BASE + 405
    MPEG_VIDEO_MPEG4_PROFILE = CODEC_BASE + 406
    MPEG_VIDEO_MPEG4_QPEL = CODEC_BASE + 407
    MPEG_VIDEO_VPX_NUM_PARTITIONS = CODEC_BASE + 500
    MPEG_VIDEO_VPX_IMD_DISABLE_4X4 = CODEC_BASE + 501
    MPEG_VIDEO_VPX_NUM_REF_FRAMES = CODEC_BASE + 502
    MPEG_VIDEO_VPX_FILTER_LEVEL = CODEC_BASE + 503
    MPEG_VIDEO_VPX_FILTER_SHARPNESS = CODEC_BASE + 504
    MPEG_VIDEO_VPX_GOLDEN_FRAME_REF_PERIOD = CODEC_BASE + 505
    MPEG_VIDEO_VPX_GOLDEN_FRAME_SEL = CODEC_BASE + 506
    MPEG_VIDEO_VPX_MIN_QP = CODEC_BASE + 507
    MPEG_VIDEO_VPX_MAX_QP = CODEC_BASE + 508
    MPEG_VIDEO_VPX_I_FRAME_QP = CODEC_BASE + 509
    MPEG_VIDEO_VPX_P_FRAME_QP = CODEC_BASE + 510
    MPEG_VIDEO_VP8_PROFILE = CODEC_BASE + 511
    MPEG_VIDEO_VPX_PROFILE = MPEG_VIDEO_VP8_PROFILE
    MPEG_VIDEO_VP9_PROFILE = CODEC_BASE + 512
    MPEG_VIDEO_VP9_LEVEL = CODEC_BASE + 513
    MPEG_VIDEO_HEVC_MIN_QP = CODEC_BASE + 600
    MPEG_VIDEO_HEVC_MAX_QP = CODEC_BASE + 601
    MPEG_VIDEO_HEVC_I_FRAME_QP = CODEC_BASE + 602
    MPEG_VIDEO_HEVC_P_FRAME_QP = CODEC_BASE + 603
    MPEG_VIDEO_HEVC_B_FRAME_QP = CODEC_BASE + 604
    MPEG_VIDEO_HEVC_HIER_QP = CODEC_BASE + 605
    MPEG_VIDEO_HEVC_HIER_CODING_TYPE = CODEC_BASE + 606
    MPEG_VIDEO_HEVC_HIER_CODING_LAYER = CODEC_BASE + 607
    MPEG_VIDEO_HEVC_HIER_CODING_L0_QP = CODEC_BASE + 608
    MPEG_VIDEO_HEVC_HIER_CODING_L1_QP = CODEC_BASE + 609
    MPEG_VIDEO_HEVC_HIER_CODING_L2_QP = CODEC_BASE + 610
    MPEG_VIDEO_HEVC_HIER_CODING_L3_QP = CODEC_BASE + 611
    MPEG_VIDEO_HEVC_HIER_CODING_L4_QP = CODEC_BASE + 612
    MPEG_VIDEO_HEVC_HIER_CODING_L5_QP = CODEC_BASE + 613
    MPEG_VIDEO_HEVC_HIER_CODING_L6_QP = CODEC_BASE + 614
    MPEG_VIDEO_HEVC_PROFILE = CODEC_BASE + 615
    MPEG_VIDEO_HEVC_LEVEL = CODEC_BASE + 616
    MPEG_VIDEO_HEVC_FRAME_RATE_RESOLUTION = CODEC_BASE + 617
    MPEG_VIDEO_HEVC_TIER = CODEC_BASE + 618
    MPEG_VIDEO_HEVC_MAX_PARTITION_DEPTH = CODEC_BASE + 619
    MPEG_VIDEO_HEVC_LOOP_FILTER_MODE = CODEC_BASE + 620
    MPEG_VIDEO_HEVC_LF_BETA_OFFSET_DIV2 = CODEC_BASE + 621
    MPEG_VIDEO_HEVC_LF_TC_OFFSET_DIV2 = CODEC_BASE + 622
    MPEG_VIDEO_HEVC_REFRESH_TYPE = CODEC_BASE + 623
    MPEG_VIDEO_HEVC_REFRESH_PERIOD = CODEC_BASE + 624
    MPEG_VIDEO_HEVC_LOSSLESS_CU = CODEC_BASE + 625
    MPEG_VIDEO_HEVC_CONST_INTRA_PRED = CODEC_BASE + 626
    MPEG_VIDEO_HEVC_WAVEFRONT = CODEC_BASE + 627
    MPEG_VIDEO_HEVC_GENERAL_PB = CODEC_BASE + 628
    MPEG_VIDEO_HEVC_TEMPORAL_ID = CODEC_BASE + 629
    MPEG_VIDEO_HEVC_STRONG_SMOOTHING = CODEC_BASE + 630
    MPEG_VIDEO_HEVC_MAX_NUM_MERGE_MV_MINUS1 = CODEC_BASE + 631
    MPEG_VIDEO_HEVC_INTRA_PU_SPLIT = CODEC_BASE + 632
    MPEG_VIDEO_HEVC_TMV_PREDICTION = CODEC_BASE + 633
    MPEG_VIDEO_HEVC_WITHOUT_STARTCODE = CODEC_BASE + 634
    MPEG_VIDEO_HEVC_SIZE_OF_LENGTH_FIELD = CODEC_BASE + 635
    MPEG_VIDEO_HEVC_HIER_CODING_L0_BR = CODEC_BASE + 636
    MPEG_VIDEO_HEVC_HIER_CODING_L1_BR = CODEC_BASE + 637
    MPEG_VIDEO_HEVC_HIER_CODING_L2_BR = CODEC_BASE + 638
    MPEG_VIDEO_HEVC_HIER_CODING_L3_BR = CODEC_BASE + 639
    MPEG_VIDEO_HEVC_HIER_CODING_L4_BR = CODEC_BASE + 640
    MPEG_VIDEO_HEVC_HIER_CODING_L5_BR = CODEC_BASE + 641
    MPEG_VIDEO_HEVC_HIER_CODING_L6_BR = CODEC_BASE + 642
    MPEG_VIDEO_REF_NUMBER_FOR_PFRAMES = CODEC_BASE + 643
    MPEG_VIDEO_PREPEND_SPSPPS_TO_IDR = CODEC_BASE + 644
    MPEG_VIDEO_CONSTANT_QUALITY = CODEC_BASE + 645
    MPEG_VIDEO_FRAME_SKIP_MODE = CODEC_BASE + 646
    MPEG_VIDEO_HEVC_I_FRAME_MIN_QP = CODEC_BASE + 647
    MPEG_VIDEO_HEVC_I_FRAME_MAX_QP = CODEC_BASE + 648
    MPEG_VIDEO_HEVC_P_FRAME_MIN_QP = CODEC_BASE + 649
    MPEG_VIDEO_HEVC_P_FRAME_MAX_QP = CODEC_BASE + 650
    MPEG_VIDEO_HEVC_B_FRAME_MIN_QP = CODEC_BASE + 651
    MPEG_VIDEO_HEVC_B_FRAME_MAX_QP = CODEC_BASE + 652
    MPEG_VIDEO_DEC_DISPLAY_DELAY = CODEC_BASE + 653
    MPEG_VIDEO_DEC_DISPLAY_DELAY_ENABLE = CODEC_BASE + 654
    MPEG_VIDEO_AV1_PROFILE = CODEC_BASE + 655
    MPEG_VIDEO_AV1_LEVEL = CODEC_BASE + 656
    CODEC_CX2341X_BASE = ControlClass.CODEC | 0x1000
    MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE = CODEC_CX2341X_BASE + 0
    MPEG_CX2341X_VIDEO_SPATIAL_FILTER = CODEC_CX2341X_BASE + 1
    MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE = CODEC_CX2341X_BASE + 2
    MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE = CODEC_CX2341X_BASE + 3
    MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE = CODEC_CX2341X_BASE + 4
    MPEG_CX2341X_VIDEO_TEMPORAL_FILTER = CODEC_CX2341X_BASE + 5
    MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE = CODEC_CX2341X_BASE + 6
    MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_BOTTOM = CODEC_CX2341X_BASE + 7
    MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_TOP = CODEC_CX2341X_BASE + 8
    MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_BOTTOM = CODEC_CX2341X_BASE + 9
    MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_TOP = CODEC_CX2341X_BASE + 10
    MPEG_CX2341X_STREAM_INSERT_NAV_PACKETS = CODEC_CX2341X_BASE + 11
    CODEC_MFC51_BASE = ControlClass.CODEC | 0x1100
    MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY = CODEC_MFC51_BASE + 0
    MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY_ENABLE = CODEC_MFC51_BASE + 1
    MPEG_MFC51_VIDEO_FRAME_SKIP_MODE = CODEC_MFC51_BASE + 2
    MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE = CODEC_MFC51_BASE + 3
    MPEG_MFC51_VIDEO_PADDING = CODEC_MFC51_BASE + 4
    MPEG_MFC51_VIDEO_PADDING_YUV = CODEC_MFC51_BASE + 5
    MPEG_MFC51_VIDEO_RC_FIXED_TARGET_BIT = CODEC_MFC51_BASE + 6
    MPEG_MFC51_VIDEO_RC_REACTION_COEFF = CODEC_MFC51_BASE + 7
    MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_ACTIVITY = CODEC_MFC51_BASE + 50
    MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_DARK = CODEC_MFC51_BASE + 51
    MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_SMOOTH = CODEC_MFC51_BASE + 52
    MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_STATIC = CODEC_MFC51_BASE + 53
    MPEG_MFC51_VIDEO_H264_NUM_REF_PIC_FOR_P = CODEC_MFC51_BASE + 54
    CAMERA_CLASS_BASE = ControlClass.CAMERA | 0x900
    CAMERA_CLASS = ControlClass.CAMERA | 1
    EXPOSURE_AUTO = CAMERA_CLASS_BASE + 1
    EXPOSURE_ABSOLUTE = CAMERA_CLASS_BASE + 2
    EXPOSURE_AUTO_PRIORITY = CAMERA_CLASS_BASE + 3
    PAN_RELATIVE = CAMERA_CLASS_BASE + 4
    TILT_RELATIVE = CAMERA_CLASS_BASE + 5
    PAN_RESET = CAMERA_CLASS_BASE + 6
    TILT_RESET = CAMERA_CLASS_BASE + 7
    PAN_ABSOLUTE = CAMERA_CLASS_BASE + 8
    TILT_ABSOLUTE = CAMERA_CLASS_BASE + 9
    FOCUS_ABSOLUTE = CAMERA_CLASS_BASE + 10
    FOCUS_RELATIVE = CAMERA_CLASS_BASE + 11
    FOCUS_AUTO = CAMERA_CLASS_BASE + 12
    ZOOM_ABSOLUTE = CAMERA_CLASS_BASE + 13
    ZOOM_RELATIVE = CAMERA_CLASS_BASE + 14
    ZOOM_CONTINUOUS = CAMERA_CLASS_BASE + 15
    PRIVACY = CAMERA_CLASS_BASE + 16
    IRIS_ABSOLUTE = CAMERA_CLASS_BASE + 17
    IRIS_RELATIVE = CAMERA_CLASS_BASE + 18
    AUTO_EXPOSURE_BIAS = CAMERA_CLASS_BASE + 19
    AUTO_N_PRESET_WHITE_BALANCE = CAMERA_CLASS_BASE + 20
    WIDE_DYNAMIC_RANGE = CAMERA_CLASS_BASE + 21
    IMAGE_STABILIZATION = CAMERA_CLASS_BASE + 22
    ISO_SENSITIVITY = CAMERA_CLASS_BASE + 23
    ISO_SENSITIVITY_AUTO = CAMERA_CLASS_BASE + 24
    EXPOSURE_METERING = CAMERA_CLASS_BASE + 25
    SCENE_MODE = CAMERA_CLASS_BASE + 26
    _3A_LOCK = CAMERA_CLASS_BASE + 27
    AUTO_FOCUS_START = CAMERA_CLASS_BASE + 28
    AUTO_FOCUS_STOP = CAMERA_CLASS_BASE + 29
    AUTO_FOCUS_STATUS = CAMERA_CLASS_BASE + 30
    AUTO_FOCUS_RANGE = CAMERA_CLASS_BASE + 31
    PAN_SPEED = CAMERA_CLASS_BASE + 32
    TILT_SPEED = CAMERA_CLASS_BASE + 33
    CAMERA_ORIENTATION = CAMERA_CLASS_BASE + 34
    CAMERA_SENSOR_ROTATION = CAMERA_CLASS_BASE + 35
    HDR_SENSOR_MODE = CAMERA_CLASS_BASE + 36
    FM_TX_CLASS_BASE = ControlClass.FM_TX | 0x900
    FM_TX_CLASS = ControlClass.FM_TX | 1
    RDS_TX_DEVIATION = FM_TX_CLASS_BASE + 1
    RDS_TX_PI = FM_TX_CLASS_BASE + 2
    RDS_TX_PTY = FM_TX_CLASS_BASE + 3
    RDS_TX_PS_NAME = FM_TX_CLASS_BASE + 5
    RDS_TX_RADIO_TEXT = FM_TX_CLASS_BASE + 6
    RDS_TX_MONO_STEREO = FM_TX_CLASS_BASE + 7
    RDS_TX_ARTIFICIAL_HEAD = FM_TX_CLASS_BASE + 8
    RDS_TX_COMPRESSED = FM_TX_CLASS_BASE + 9
    RDS_TX_DYNAMIC_PTY = FM_TX_CLASS_BASE + 10
    RDS_TX_TRAFFIC_ANNOUNCEMENT = FM_TX_CLASS_BASE + 11
    RDS_TX_TRAFFIC_PROGRAM = FM_TX_CLASS_BASE + 12
    RDS_TX_MUSIC_SPEECH = FM_TX_CLASS_BASE + 13
    RDS_TX_ALT_FREQS_ENABLE = FM_TX_CLASS_BASE + 14
    RDS_TX_ALT_FREQS = FM_TX_CLASS_BASE + 15
    AUDIO_LIMITER_ENABLED = FM_TX_CLASS_BASE + 64
    AUDIO_LIMITER_RELEASE_TIME = FM_TX_CLASS_BASE + 65
    AUDIO_LIMITER_DEVIATION = FM_TX_CLASS_BASE + 66
    AUDIO_COMPRESSION_ENABLED = FM_TX_CLASS_BASE + 80
    AUDIO_COMPRESSION_GAIN = FM_TX_CLASS_BASE + 81
    AUDIO_COMPRESSION_THRESHOLD = FM_TX_CLASS_BASE + 82
    AUDIO_COMPRESSION_ATTACK_TIME = FM_TX_CLASS_BASE + 83
    AUDIO_COMPRESSION_RELEASE_TIME = FM_TX_CLASS_BASE + 84
    PILOT_TONE_ENABLED = FM_TX_CLASS_BASE + 96
    PILOT_TONE_DEVIATION = FM_TX_CLASS_BASE + 97
    PILOT_TONE_FREQUENCY = FM_TX_CLASS_BASE + 98
    TUNE_PREEMPHASIS = FM_TX_CLASS_BASE + 112
    TUNE_POWER_LEVEL = FM_TX_CLASS_BASE + 113
    TUNE_ANTENNA_CAPACITOR = FM_TX_CLASS_BASE + 114
    FLASH_CLASS_BASE = ControlClass.FLASH | 0x900
    FLASH_CLASS = ControlClass.FLASH | 1
    FLASH_LED_MODE = FLASH_CLASS_BASE + 1
    FLASH_STROBE_SOURCE = FLASH_CLASS_BASE + 2
    FLASH_STROBE = FLASH_CLASS_BASE + 3
    FLASH_STROBE_STOP = FLASH_CLASS_BASE + 4
    FLASH_STROBE_STATUS = FLASH_CLASS_BASE + 5
    FLASH_TIMEOUT = FLASH_CLASS_BASE + 6
    FLASH_INTENSITY = FLASH_CLASS_BASE + 7
    FLASH_TORCH_INTENSITY = FLASH_CLASS_BASE + 8
    FLASH_INDICATOR_INTENSITY = FLASH_CLASS_BASE + 9
    FLASH_FAULT = FLASH_CLASS_BASE + 10
    FLASH_CHARGE = FLASH_CLASS_BASE + 11
    FLASH_READY = FLASH_CLASS_BASE + 12
    JPEG_CLASS_BASE = ControlClass.JPEG | 0x900
    JPEG_CLASS = ControlClass.JPEG | 1
    JPEG_CHROMA_SUBSAMPLING = JPEG_CLASS_BASE + 1
    JPEG_RESTART_INTERVAL = JPEG_CLASS_BASE + 2
    JPEG_COMPRESSION_QUALITY = JPEG_CLASS_BASE + 3
    JPEG_ACTIVE_MARKER = JPEG_CLASS_BASE + 4
    IMAGE_SOURCE_CLASS_BASE = ControlClass.IMAGE_SOURCE | 0x900
    IMAGE_SOURCE_CLASS = ControlClass.IMAGE_SOURCE | 1
    VBLANK = IMAGE_SOURCE_CLASS_BASE + 1
    HBLANK = IMAGE_SOURCE_CLASS_BASE + 2
    ANALOGUE_GAIN = IMAGE_SOURCE_CLASS_BASE + 3
    TEST_PATTERN_RED = IMAGE_SOURCE_CLASS_BASE + 4
    TEST_PATTERN_GREENR = IMAGE_SOURCE_CLASS_BASE + 5
    TEST_PATTERN_BLUE = IMAGE_SOURCE_CLASS_BASE + 6
    TEST_PATTERN_GREENB = IMAGE_SOURCE_CLASS_BASE + 7
    UNIT_CELL_SIZE = IMAGE_SOURCE_CLASS_BASE + 8
    NOTIFY_GAINS = IMAGE_SOURCE_CLASS_BASE + 9
    IMAGE_PROC_CLASS_BASE = ControlClass.IMAGE_PROC | 0x900
    IMAGE_PROC_CLASS = ControlClass.IMAGE_PROC | 1
    LINK_FREQ = IMAGE_PROC_CLASS_BASE + 1
    PIXEL_RATE = IMAGE_PROC_CLASS_BASE + 2
    TEST_PATTERN = IMAGE_PROC_CLASS_BASE + 3
    DEINTERLACING_MODE = IMAGE_PROC_CLASS_BASE + 4
    DIGITAL_GAIN = IMAGE_PROC_CLASS_BASE + 5
    DV_CLASS_BASE = ControlClass.DV | 0x900
    DV_CLASS = ControlClass.DV | 1
    DV_TX_HOTPLUG = DV_CLASS_BASE + 1
    DV_TX_RXSENSE = DV_CLASS_BASE + 2
    DV_TX_EDID_PRESENT = DV_CLASS_BASE + 3
    DV_TX_MODE = DV_CLASS_BASE + 4
    DV_TX_RGB_RANGE = DV_CLASS_BASE + 5
    DV_TX_IT_CONTENT_TYPE = DV_CLASS_BASE + 6
    DV_RX_POWER_PRESENT = DV_CLASS_BASE + 100
    DV_RX_RGB_RANGE = DV_CLASS_BASE + 101
    DV_RX_IT_CONTENT_TYPE = DV_CLASS_BASE + 102
    FM_RX_CLASS_BASE = ControlClass.FM_RX | 0x900
    FM_RX_CLASS = ControlClass.FM_RX | 1
    TUNE_DEEMPHASIS = FM_RX_CLASS_BASE + 1
    RDS_RECEPTION = FM_RX_CLASS_BASE + 2
    RDS_RX_PTY = FM_RX_CLASS_BASE + 3
    RDS_RX_PS_NAME = FM_RX_CLASS_BASE + 4
    RDS_RX_RADIO_TEXT = FM_RX_CLASS_BASE + 5
    RDS_RX_TRAFFIC_ANNOUNCEMENT = FM_RX_CLASS_BASE + 6
    RDS_RX_TRAFFIC_PROGRAM = FM_RX_CLASS_BASE + 7
    RDS_RX_MUSIC_SPEECH = FM_RX_CLASS_BASE + 8
    RF_TUNER_CLASS_BASE = ControlClass.RF_TUNER | 0x900
    RF_TUNER_CLASS = ControlClass.RF_TUNER | 1
    RF_TUNER_BANDWIDTH_AUTO = RF_TUNER_CLASS_BASE + 11
    RF_TUNER_BANDWIDTH = RF_TUNER_CLASS_BASE + 12
    RF_TUNER_RF_GAIN = RF_TUNER_CLASS_BASE + 32
    RF_TUNER_LNA_GAIN_AUTO = RF_TUNER_CLASS_BASE + 41
    RF_TUNER_LNA_GAIN = RF_TUNER_CLASS_BASE + 42
    RF_TUNER_MIXER_GAIN_AUTO = RF_TUNER_CLASS_BASE + 51
    RF_TUNER_MIXER_GAIN = RF_TUNER_CLASS_BASE + 52
    RF_TUNER_IF_GAIN_AUTO = RF_TUNER_CLASS_BASE + 61
    RF_TUNER_IF_GAIN = RF_TUNER_CLASS_BASE + 62
    RF_TUNER_PLL_LOCK = RF_TUNER_CLASS_BASE + 91
    DETECT_CLASS_BASE = ControlClass.DETECT | 0x900
    DETECT_CLASS = ControlClass.DETECT | 1
    DETECT_MD_MODE = DETECT_CLASS_BASE + 1
    DETECT_MD_GLOBAL_THRESHOLD = DETECT_CLASS_BASE + 2
    DETECT_MD_THRESHOLD_GRID = DETECT_CLASS_BASE + 3
    DETECT_MD_REGION_GRID = DETECT_CLASS_BASE + 4
    CODEC_STATELESS_BASE = ControlClass.CODEC_STATELESS | 0x900
    CODEC_STATELESS_CLASS = ControlClass.CODEC_STATELESS | 1
    STATELESS_H264_DECODE_MODE = CODEC_STATELESS_BASE + 0
    STATELESS_H264_START_CODE = CODEC_STATELESS_BASE + 1
    STATELESS_H264_SPS = CODEC_STATELESS_BASE + 2
    STATELESS_H264_PPS = CODEC_STATELESS_BASE + 3
    STATELESS_H264_SCALING_MATRIX = CODEC_STATELESS_BASE + 4
    STATELESS_H264_PRED_WEIGHTS = CODEC_STATELESS_BASE + 5
    STATELESS_H264_SLICE_PARAMS = CODEC_STATELESS_BASE + 6
    STATELESS_H264_DECODE_PARAMS = CODEC_STATELESS_BASE + 7
    STATELESS_FWHT_PARAMS = CODEC_STATELESS_BASE + 100
    STATELESS_VP8_FRAME = CODEC_STATELESS_BASE + 200
    STATELESS_MPEG2_SEQUENCE = CODEC_STATELESS_BASE + 220
    STATELESS_MPEG2_PICTURE = CODEC_STATELESS_BASE + 221
    STATELESS_MPEG2_QUANTISATION = CODEC_STATELESS_BASE + 222
    STATELESS_HEVC_SPS = CODEC_STATELESS_BASE + 400
    STATELESS_HEVC_PPS = CODEC_STATELESS_BASE + 401
    STATELESS_HEVC_SLICE_PARAMS = CODEC_STATELESS_BASE + 402
    STATELESS_HEVC_SCALING_MATRIX = CODEC_STATELESS_BASE + 403
    STATELESS_HEVC_DECODE_PARAMS = CODEC_STATELESS_BASE + 404
    STATELESS_HEVC_DECODE_MODE = CODEC_STATELESS_BASE + 405
    STATELESS_HEVC_START_CODE = CODEC_STATELESS_BASE + 406
    STATELESS_HEVC_ENTRY_POINT_OFFSETS = CODEC_STATELESS_BASE + 407
    COLORIMETRY_CLASS_BASE = ControlClass.COLORIMETRY | 0x900
    COLORIMETRY_CLASS = ControlClass.COLORIMETRY | 1
    COLORIMETRY_HDR10_CLL_INFO = COLORIMETRY_CLASS_BASE + 0
    COLORIMETRY_HDR10_MASTERING_DISPLAY = COLORIMETRY_CLASS_BASE + 1
    STATELESS_VP9_FRAME = CODEC_STATELESS_BASE + 300
    STATELESS_VP9_COMPRESSED_HDR = CODEC_STATELESS_BASE + 301
    STATELESS_AV1_SEQUENCE = CODEC_STATELESS_BASE + 500
    STATELESS_AV1_TILE_GROUP_ENTRY = CODEC_STATELESS_BASE + 501
    STATELESS_AV1_FRAME = CODEC_STATELESS_BASE + 502
    STATELESS_AV1_FILM_GRAIN = CODEC_STATELESS_BASE + 505
    MPEG_CLASS = CODEC_CLASS
    MPEG_BASE = CODEC_BASE
    MPEG_CX2341X_BASE = CODEC_CX2341X_BASE
    MPEG_MFC51_BASE = CODEC_MFC51_BASE
    MAX_CTRLS = 0x400


class ControlFlag(enum.IntFlag):
    DISABLED = 0x1
    GRABBED = 0x2
    READ_ONLY = 0x4
    UPDATE = 0x8
    INACTIVE = 0x10
    SLIDER = 0x20
    WRITE_ONLY = 0x40
    VOLATILE = 0x80
    HAS_PAYLOAD = 0x100
    EXECUTE_ON_WRITE = 0x200
    MODIFY_LAYOUT = 0x400
    DYNAMIC_ARRAY = 0x800
    NEXT_CTRL = 0x80000000
    NEXT_COMPOUND = 0x40000000


class ControlWhichValue(enum.IntEnum):
    CUR_VAL = 0x0
    DEF_VAL = 0xF000000
    REQUEST_VAL = 0xF010000


class TimeCodeType(enum.IntEnum):
    _24FPS = 0x1
    _25FPS = 0x2
    _30FPS = 0x3
    _50FPS = 0x4
    _60FPS = 0x5


class TimeCodeFlag(enum.IntFlag):
    DROPFRAME = 0x0001  # "drop-frame" mode
    COLORFRAME = 0x2


class EventSubscriptionFlag(enum.IntFlag):
    SEND_INITIAL = 1 << 0
    ALLOW_FEEDBACK = 1 << 1


class EventControlChange(enum.IntFlag):
    VALUE = 1 << 0
    FLAGS = 1 << 1
    RANGE = 1 << 2
    DIMENSIONS = 1 << 3


class EventType(enum.IntEnum):
    ALL = 0x0
    VSYNC = 0x1
    EOS = 0x2
    CTRL = 0x3
    FRAME_SYNC = 0x4
    SOURCE_CHANGE = 0x5
    MOTION_DET = 0x6
    SRC_CH_RESOLUTION = 1 << 0
    MD_FL_HAVE_FRAME_SEQ = 1 << 0


class MbusFrameFormatFlag(enum.IntFlag):
    SET_CSC = 0x1


class Interlaced(enum.IntEnum):
    V4L2_DV_PROGRESSIVE = 0x0
    V4L2_DV_INTERLACED = 0x1


class PositivePolarityFlag(enum.IntFlag):
    V4L2_DV_VSYNC_POS_POL = 0x1
    V4L2_DV_HSYNC_POS_POL = 0x2


class DVTimingsStandardFlag(enum.IntFlag):
    CEA861 = 1 << 0  # CEA-861 Digital TV Profile
    DMT = 1 << 1  # VESA Discrete Monitor Timings
    CVT = 1 << 2  # VESA Coordinated Video Timings
    GTF = 1 << 3  # VESA Generalized Timings Formula
    SDI = 1 << 4  # SDI Timings


class DVTimingsFlag(enum.IntFlag):
    REDUCED_BLANKING = 1 << 0
    CAN_REDUCE_FPS = 1 << 1
    REDUCED_FPS = 1 << 2
    HALF_LINE = 1 << 3
    IS_CE_VIDEO = 1 << 4
    FIRST_FIELD_EXTRA_LINE = 1 << 5
    HAS_PICTURE_ASPECT = 1 << 6
    HAS_CEA861_VIC = 1 << 7
    HAS_HDMI_VIC = 1 << 8
    CAN_DETECT_REDUCED_FPS = 1 << 9


class DVTimingsCapabilities(enum.IntFlag):
    INTERLACED = 1 << 0
    PROGRESSIVE = 1 << 1
    REDUCED_BLANKING = 1 << 2
    CUSTOM = 1 << 3


class PowerLineFrequency(enum.IntEnum):
    DISABLED = 0
    _50HZ = 1
    _60HZ = 2
    AUTO = 3


class Colorfx(enum.IntEnum):
    NONE = 0
    BW = 1
    SEPIA = 2
    NEGATIVE = 3
    EMBOSS = 4
    SKETCH = 5
    SKY_BLUE = 6
    GRASS_GREEN = 7
    SKIN_WHITEN = 8
    VIVID = 9
    AQUA = 10
    ART_FREEZE = 11
    SILHOUETTE = 12
    SOLARIZATION = 13
    ANTIQUE = 14
    SET_CBCR = 15
    SET_RGB = 16


class MpegStreamType(enum.IntEnum):
    MPEG2_PS = 0
    MPEG2_TS = 1
    MPEG1_SS = 2
    MPEG2_DVD = 3
    MPEG1_VCD = 4
    MPEG2_SVCD = 5


class MpegStreamVbiFmt(enum.IntEnum):
    NONE = 0
    IVTV = 1


class MpegAudioSamplingFreq(enum.IntEnum):
    _44100 = 0
    _48000 = 1
    _32000 = 2


class MpegAudioEncoding(enum.IntEnum):
    LAYER_1 = 0
    LAYER_2 = 1
    LAYER_3 = 2
    AAC = 3
    AC3 = 4


class MpegAudioL1Bitrate(enum.IntEnum):
    _32K = 0
    _64K = 1
    _96K = 2
    _128K = 3
    _160K = 4
    _192K = 5
    _224K = 6
    _256K = 7
    _288K = 8
    _320K = 9
    _352K = 10
    _384K = 11
    _416K = 12
    _448K = 13


class MpegAudioL2Bitrate(enum.IntEnum):
    _32K = 0
    _48K = 1
    _56K = 2
    _64K = 3
    _80K = 4
    _96K = 5
    _112K = 6
    _128K = 7
    _160K = 8
    _192K = 9
    _224K = 10
    _256K = 11
    _320K = 12
    _384K = 13


class MpegAudioL3Bitrate(enum.IntEnum):
    _32K = 0
    _40K = 1
    _48K = 2
    _56K = 3
    _64K = 4
    _80K = 5
    _96K = 6
    _112K = 7
    _128K = 8
    _160K = 9
    _192K = 10
    _224K = 11
    _256K = 12
    _320K = 13


class MpegAudioMode(enum.IntEnum):
    STEREO = 0
    JOINT_STEREO = 1
    DUAL = 2
    MONO = 3


class MpegAudioModeExtension(enum.IntEnum):
    BOUND_4 = 0
    BOUND_8 = 1
    BOUND_12 = 2
    BOUND_16 = 3


class MpegAudioEmphasis(enum.IntEnum):
    NONE = 0
    _50_DIV_15_uS = 1
    CCITT_J17 = 2


class MpegAudioCrc(enum.IntEnum):
    NONE = 0
    CRC16 = 1


class MpegAudioAc3Bitrate(enum.IntEnum):
    _32K = 0
    _40K = 1
    _48K = 2
    _56K = 3
    _64K = 4
    _80K = 5
    _96K = 6
    _112K = 7
    _128K = 8
    _160K = 9
    _192K = 10
    _224K = 11
    _256K = 12
    _320K = 13
    _384K = 14
    _448K = 15
    _512K = 16
    _576K = 17
    _640K = 18


class MpegAudioDecPlayback(enum.IntEnum):
    AUTO = 0
    STEREO = 1
    LEFT = 2
    RIGHT = 3
    MONO = 4
    SWAPPED_STEREO = 5


class MpegVideoEncoding(enum.IntEnum):
    MPEG_1 = 0
    MPEG_2 = 1
    MPEG_4_AVC = 2


class MpegVideoAspect(enum.IntEnum):
    _1x1 = 0
    _4x3 = 1
    _16x9 = 2
    _221x100 = 3


class MpegVideoBitrateMode(enum.IntEnum):
    VBR = 0
    CBR = 1
    CQ = 2


class MpegVideoHeaderMode(enum.IntEnum):
    SEPARATE = 0
    JOINED_WITH_1ST_FRAME = 1


class MpegVideoMultiSliceMode(enum.IntEnum):
    SINGLE = 0
    MAX_MB = 1
    MAX_BYTES = 2
    ICE_MODE_MAX_MB = 1
    ICE_MODE_MAX_BYTES = 2


class MpegVideoIntraRefreshPeriodType(enum.IntEnum):
    RANDOM = 0
    CYCLIC = 1


class MpegVideoMpeg2Level(enum.IntEnum):
    LOW = 0
    MAIN = 1
    HIGH_1440 = 2
    HIGH = 3


class MpegVideoMpeg2Profile(enum.IntEnum):
    SIMPLE = 0
    MAIN = 1
    SNR_SCALABLE = 2
    SPATIALLY_SCALABLE = 3
    HIGH = 4
    MULTIVIEW = 5


class MpegVideoH264EntropyMode(enum.IntEnum):
    CAVLC = 0
    CABAC = 1


class MpegVideoH264Level(enum.IntEnum):
    _1_0 = 0
    _1B = 1
    _1_1 = 2
    _1_2 = 3
    _1_3 = 4
    _2_0 = 5
    _2_1 = 6
    _2_2 = 7
    _3_0 = 8
    _3_1 = 9
    _3_2 = 10
    _4_0 = 11
    _4_1 = 12
    _4_2 = 13
    _5_0 = 14
    _5_1 = 15
    _5_2 = 16
    _6_0 = 17
    _6_1 = 18
    _6_2 = 19


class MpegVideoH264LoopFilterMode(enum.IntEnum):
    ENABLED = 0
    DISABLED = 1
    DISABLED_AT_SLICE_BOUNDARY = 2


class MpegVideoH264Profile(enum.IntEnum):
    BASELINE = 0
    CONSTRAINED_BASELINE = 1
    MAIN = 2
    EXTENDED = 3
    HIGH = 4
    HIGH_10 = 5
    HIGH_422 = 6
    HIGH_444_PREDICTIVE = 7
    HIGH_10_INTRA = 8
    HIGH_422_INTRA = 9
    HIGH_444_INTRA = 10
    CAVLC_444_INTRA = 11
    SCALABLE_BASELINE = 12
    SCALABLE_HIGH = 13
    SCALABLE_HIGH_INTRA = 14
    STEREO_HIGH = 15
    MULTIVIEW_HIGH = 16
    CONSTRAINED_HIGH = 17


class MpegVideoH264VuiSarIdc(enum.IntEnum):
    UNSPECIFIED = 0
    _1x1 = 1
    _12x11 = 2
    _10x11 = 3
    _16x11 = 4
    _40x33 = 5
    _24x11 = 6
    _20x11 = 7
    _32x11 = 8
    _80x33 = 9
    _18x11 = 10
    _15x11 = 11
    _64x33 = 12
    _160x99 = 13
    _4x3 = 14
    _3x2 = 15
    _2x1 = 16
    EXTENDED = 17


class MpegVideoH264SeiFpArrangementType(enum.IntEnum):
    CHECKERBOARD = 0
    COLUMN = 1
    ROW = 2
    SIDE_BY_SIDE = 3
    TOP_BOTTOM = 4
    TEMPORAL = 5


class MpegVideoH264FmoMapType(enum.IntEnum):
    INTERLEAVED_SLICES = 0
    SCATTERED_SLICES = 1
    FOREGROUND_WITH_LEFT_OVER = 2
    BOX_OUT = 3
    RASTER_SCAN = 4
    WIPE_SCAN = 5
    EXPLICIT = 6


class MpegVideoH264FmoChangeDir(enum.IntEnum):
    RIGHT = 0
    LEFT = 1


class MpegVideoH264HierarchicalCodingType(enum.IntEnum):
    B = 0
    P = 1


class MpegVideoMpeg4Level(enum.IntEnum):
    _0 = 0
    _0B = 1
    _1 = 2
    _2 = 3
    _3 = 4
    _3B = 5
    _4 = 6
    _5 = 7


class MpegVideoMpeg4Profile(enum.IntEnum):
    SIMPLE = 0
    ADVANCED_SIMPLE = 1
    CORE = 2
    SIMPLE_SCALABLE = 3
    ADVANCED_CODING_EFFICIENCY = 4


class Vp8NumPartitions(enum.IntEnum):
    _1_PARTITION = 0
    _2_PARTITIONS = 1
    _4_PARTITIONS = 2
    _8_PARTITIONS = 3


class Vp8NumRefFrames(enum.IntEnum):
    _1_REF_FRAME = 0
    _2_REF_FRAME = 1
    _3_REF_FRAME = 2


class Vp8GoldenFrameSel(enum.IntEnum):
    PREV = 0
    REF_PERIOD = 1


class MpegVideoVp8Profile(enum.IntEnum):
    _0 = 0
    _1 = 1
    _2 = 2
    _3 = 3


class MpegVideoVp9Profile(enum.IntEnum):
    _0 = 0
    _1 = 1
    _2 = 2
    _3 = 3


class MpegVideoVp9Level(enum.IntEnum):
    _1_0 = 0
    _1_1 = 1
    _2_0 = 2
    _2_1 = 3
    _3_0 = 4
    _3_1 = 5
    _4_0 = 6
    _4_1 = 7
    _5_0 = 8
    _5_1 = 9
    _5_2 = 10
    _6_0 = 11
    _6_1 = 12
    _6_2 = 13


class MpegVideoHevcHierCodingType(enum.IntEnum):
    B = 0
    P = 1


class MpegVideoHevcProfile(enum.IntEnum):
    MAIN = 0
    MAIN_STILL_PICTURE = 1
    MAIN_10 = 2


class MpegVideoHevcLevel(enum.IntEnum):
    _1 = 0
    _2 = 1
    _2_1 = 2
    _3 = 3
    _3_1 = 4
    _4 = 5
    _4_1 = 6
    _5 = 7
    _5_1 = 8
    _5_2 = 9
    _6 = 10
    _6_1 = 11
    _6_2 = 12


class MpegVideoHevcTier(enum.IntEnum):
    MAIN = 0
    HIGH = 1


class CidMpegVideoHevcLoopFilterMode(enum.IntEnum):
    DISABLED = 0
    ENABLED = 1
    DISABLED_AT_SLICE_BOUNDARY = 2


class CidMpegVideoHevcRefreshType(enum.IntEnum):
    NONE = 0
    CRA = 1
    IDR = 2


class CidMpegVideoHevcSizeOfLengthField(enum.IntEnum):
    _0 = 0
    _1 = 1
    _2 = 2
    _4 = 3


class MpegVideoFrameSkipMode(enum.IntEnum):
    DISABLED = 0
    LEVEL_LIMIT = 1
    BUF_LIMIT = 2


class MpegVideoAv1Profile(enum.IntEnum):
    MAIN = 0
    HIGH = 1
    PROFESSIONAL = 2


class MpegVideoAv1Level(enum.IntEnum):
    _2_0 = 0
    _2_1 = 1
    _2_2 = 2
    _2_3 = 3
    _3_0 = 4
    _3_1 = 5
    _3_2 = 6
    _3_3 = 7
    _4_0 = 8
    _4_1 = 9
    _4_2 = 10
    _4_3 = 11
    _5_0 = 12
    _5_1 = 13
    _5_2 = 14
    _5_3 = 15
    _6_0 = 16
    _6_1 = 17
    _6_2 = 18
    _6_3 = 19
    _7_0 = 20
    _7_1 = 21
    _7_2 = 22
    _7_3 = 23


class MpegCx2341xVideoSpatialFilterMode(enum.IntEnum):
    MANUAL = 0
    AUTO = 1


class MpegCx2341xVideoLumaSpatialFilterType(enum.IntEnum):
    OFF = 0
    _1D_HOR = 1
    _1D_VERT = 2
    _2D_HV_SEPARABLE = 3
    _2D_SYM_NON_SEPARABLE = 4


class MpegCx2341xVideoChromaSpatialFilterType(enum.IntEnum):
    OFF = 0
    _1D_HOR = 1


class MpegCx2341xVideoTemporalFilterMode(enum.IntEnum):
    MANUAL = 0
    AUTO = 1


class MpegCx2341xVideoMedianFilterType(enum.IntEnum):
    OFF = 0
    HOR = 1
    VERT = 2
    HOR_VERT = 3
    DIAG = 4


class MpegMfc51VideoFrameSkipMode(enum.IntEnum):
    DISABLED = 0
    LEVEL_LIMIT = 1
    BUF_LIMIT = 2


class MpegMfc51VideoForceFrameType(enum.IntEnum):
    DISABLED = 0
    I_FRAME = 1
    NOT_CODED = 2


class ExposureAutoType(enum.IntEnum):
    AUTO = 0
    MANUAL = 1
    SHUTTER_PRIORITY = 2
    APERTURE_PRIORITY = 3


class AutoNPresetWhiteBalance(enum.IntEnum):
    MANUAL = 0
    AUTO = 1
    INCANDESCENT = 2
    FLUORESCENT = 3
    FLUORESCENT_H = 4
    HORIZON = 5
    DAYLIGHT = 6
    FLASH = 7
    CLOUDY = 8
    SHADE = 9


class IsoSensitivityAutoType(enum.IntEnum):
    MANUAL = 0
    AUTO = 1


class ExposureMetering(enum.IntEnum):
    AVERAGE = 0
    CENTER_WEIGHTED = 1
    SPOT = 2
    MATRIX = 3


class SceneMode(enum.IntEnum):
    NONE = 0
    BACKLIGHT = 1
    BEACH_SNOW = 2
    CANDLE_LIGHT = 3
    DAWN_DUSK = 4
    FALL_COLORS = 5
    FIREWORKS = 6
    LANDSCAPE = 7
    NIGHT = 8
    PARTY_INDOOR = 9
    PORTRAIT = 10
    SPORTS = 11
    SUNSET = 12
    TEXT = 13


class AutoFocusRange(enum.IntEnum):
    AUTO = 0
    NORMAL = 1
    MACRO = 2
    INFINITY = 3


class Preemphasis(enum.IntEnum):
    DISABLED = 0
    _50_uS = 1
    _75_uS = 2


class FlashLedMode(enum.IntEnum):
    NONE = 0
    FLASH = 1
    TORCH = 2


class FlashStrobeSource(enum.IntEnum):
    SOFTWARE = 0
    EXTERNAL = 1


class JpegChromaSubsampling(enum.IntEnum):
    _444 = 0
    _422 = 1
    _420 = 2
    _411 = 3
    _410 = 4
    GRAY = 5


class DvTxMode(enum.IntEnum):
    DVI_D = 0
    HDMI = 1


class DvRgbRange(enum.IntEnum):
    AUTO = 0
    LIMITED = 1
    FULL = 2


class DvItContentType(enum.IntEnum):
    GRAPHICS = 0
    PHOTO = 1
    CINEMA = 2
    GAME = 3
    NO_ITC = 4


class Deemphasis(enum.IntEnum):
    DISABLED = 0
    _50_uS = 1
    _75_uS = 2


class DetectMdMode(enum.IntEnum):
    DISABLED = 0
    GLOBAL = 1
    THRESHOLD_GRID = 2
    REGION_GRID = 3


class StatelessH264DecodeMode(enum.IntEnum):
    SLICE_BASED = 0
    FRAME_BASED = 1


class StatelessH264StartCode(enum.IntEnum):
    NONE = 0
    ANNEX_B = 1


class StatelessHevcDecodeMode(enum.IntEnum):
    SLICE_BASED = 0
    FRAME_BASED = 1


class StatelessHevcStartCode(enum.IntEnum):
    NONE = 0
    ANNEX_B = 1


class Av1WarpModel(enum.IntEnum):
    IDENTITY = 0
    TRANSLATION = 1
    ROTZOOM = 2
    AFFINE = 3


class Av1ReferenceFrame(enum.IntEnum):
    INTRA_FRAME = 0
    LAST_FRAME = 1
    LAST2_FRAME = 2
    LAST3_FRAME = 3
    GOLDEN_FRAME = 4
    BWDREF_FRAME = 5
    ALTREF2_FRAME = 6
    ALTREF_FRAME = 7


class Av1FrameRestorationType(enum.IntEnum):
    NONE = 0
    WIENER = 1
    SGRPROJ = 2
    SWITCHABLE = 3


class Av1SegmentFeature(enum.IntEnum):
    ALT_Q = 0
    ALT_LF_Y_V = 1
    REF_FRAME = 5
    REF_SKIP = 6
    REF_GLOBALMV = 7
    MAX = 8


class Av1FrameType(enum.IntEnum):
    KEY_FRAME = 0
    INTER_FRAME = 1
    INTRA_ONLY_FRAME = 2
    SWITCH_FRAME = 3


class Av1InterpolationFilter(enum.IntEnum):
    EIGHTTAP = 0
    EIGHTTAP_SMOOTH = 1
    EIGHTTAP_SHARP = 2
    BILINEAR = 3
    SWITCHABLE = 4


class Av1TxMode(enum.IntEnum):
    ONLY_4X4 = 0
    LARGEST = 1
    SELECT = 2


class Field(enum.IntEnum):
    ANY = 0
    NONE = 1
    TOP = 2
    BOTTOM = 3
    INTERLACED = 4
    SEQ_TB = 5
    SEQ_BT = 6
    ALTERNATE = 7
    INTERLACED_TB = 8
    INTERLACED_BT = 9


class BufType(enum.IntEnum):
    VIDEO_CAPTURE = 1
    VIDEO_OUTPUT = 2
    VIDEO_OVERLAY = 3
    VBI_CAPTURE = 4
    VBI_OUTPUT = 5
    SLICED_VBI_CAPTURE = 6
    SLICED_VBI_OUTPUT = 7
    VIDEO_OUTPUT_OVERLAY = 8
    VIDEO_CAPTURE_MPLANE = 9
    VIDEO_OUTPUT_MPLANE = 10
    SDR_CAPTURE = 11
    SDR_OUTPUT = 12
    META_CAPTURE = 13
    META_OUTPUT = 14


class TunerType(enum.IntEnum):
    RADIO = 1
    ANALOG_TV = 2
    DIGITAL_TV = 3
    SDR = 4
    RF = 5


class Memory(enum.IntEnum):
    MMAP = 1
    USERPTR = 2
    OVERLAY = 3
    DMABUF = 4


class Colorspace(enum.IntEnum):
    DEFAULT = 0
    SMPTE170M = 1
    SMPTE240M = 2
    REC709 = 3
    BT878 = 4
    _470_SYSTEM_M = 5
    _470_SYSTEM_BG = 6
    JPEG = 7
    SRGB = 8
    OPRGB = 9
    BT2020 = 10
    RAW = 11
    DCI_P3 = 12


class XferFunc(enum.IntEnum):
    DEFAULT = 0
    _709 = 1
    SRGB = 2
    OPRGB = 3
    SMPTE240M = 4
    NONE = 5
    DCI_P3 = 6
    SMPTE2084 = 7


class YcbcrEncoding(enum.IntEnum):
    DEFAULT = 0
    _601 = 1
    _709 = 2
    XV601 = 3
    XV709 = 4
    SYCC = 5
    BT2020 = 6
    BT2020_CONST_LUM = 7
    SMPTE240M = 8


class HsvEncoding(enum.IntEnum):
    _180 = 128
    _256 = 129


class Quantization(enum.IntEnum):
    DEFAULT = 0
    FULL_RANGE = 1
    LIM_RANGE = 2


class Priority(enum.IntEnum):
    UNSET = 0
    BACKGROUND = 1
    INTERACTIVE = 2
    RECORD = 3
    DEFAULT = 2


class Frmsizetypes(enum.IntEnum):
    DISCRETE = 1
    CONTINUOUS = 2
    STEPWISE = 3


class Frmivaltypes(enum.IntEnum):
    DISCRETE = 1
    CONTINUOUS = 2
    STEPWISE = 3


class CtrlType(enum.IntEnum):
    INTEGER = 1
    BOOLEAN = 2
    MENU = 3
    BUTTON = 4
    INTEGER64 = 5
    CTRL_CLASS = 6
    STRING = 7
    BITMASK = 8
    INTEGER_MENU = 9
    COMPOUND_TYPES = 256
    U8 = 256
    U16 = 257
    U32 = 258
    AREA = 262
    HDR10_CLL_INFO = 272
    HDR10_MASTERING_DISPLAY = 273
    H264_SPS = 512
    H264_PPS = 513
    H264_SCALING_MATRIX = 514
    H264_SLICE_PARAMS = 515
    H264_DECODE_PARAMS = 516
    H264_PRED_WEIGHTS = 517
    FWHT_PARAMS = 544
    VP8_FRAME = 576
    MPEG2_QUANTISATION = 592
    MPEG2_SEQUENCE = 593
    MPEG2_PICTURE = 594
    VP9_COMPRESSED_HDR = 608
    VP9_FRAME = 609
    HEVC_SPS = 624
    HEVC_PPS = 625
    HEVC_SLICE_PARAMS = 626
    HEVC_SCALING_MATRIX = 627
    HEVC_DECODE_PARAMS = 628
    AV1_SEQUENCE = 640
    AV1_TILE_GROUP_ENTRY = 641
    AV1_FRAME = 642
    AV1_FILM_GRAIN = 643


class MbusPixelcode(enum.IntEnum):
    FIXED = 1
    RGB444_2X8_PADHI_BE = 4097
    RGB444_2X8_PADHI_LE = 4098
    RGB555_2X8_PADHI_BE = 4099
    RGB555_2X8_PADHI_LE = 4100
    BGR565_2X8_BE = 4101
    BGR565_2X8_LE = 4102
    RGB565_2X8_BE = 4103
    RGB565_2X8_LE = 4104
    RGB666_1X18 = 4105
    RGB888_1X24 = 4106
    RGB888_2X12_BE = 4107
    RGB888_2X12_LE = 4108
    ARGB8888_1X32 = 4109
    Y8_1X8 = 8193
    UV8_1X8 = 8213
    UYVY8_1_5X8 = 8194
    VYUY8_1_5X8 = 8195
    YUYV8_1_5X8 = 8196
    YVYU8_1_5X8 = 8197
    UYVY8_2X8 = 8198
    VYUY8_2X8 = 8199
    YUYV8_2X8 = 8200
    YVYU8_2X8 = 8201
    Y10_1X10 = 8202
    UYVY10_2X10 = 8216
    VYUY10_2X10 = 8217
    YUYV10_2X10 = 8203
    YVYU10_2X10 = 8204
    Y12_1X12 = 8211
    UYVY8_1X16 = 8207
    VYUY8_1X16 = 8208
    YUYV8_1X16 = 8209
    YVYU8_1X16 = 8210
    YDYUYDYV8_1X16 = 8212
    UYVY10_1X20 = 8218
    VYUY10_1X20 = 8219
    YUYV10_1X20 = 8205
    YVYU10_1X20 = 8206
    YUV10_1X30 = 8214
    AYUV8_1X32 = 8215
    UYVY12_2X12 = 8220
    VYUY12_2X12 = 8221
    YUYV12_2X12 = 8222
    YVYU12_2X12 = 8223
    UYVY12_1X24 = 8224
    VYUY12_1X24 = 8225
    YUYV12_1X24 = 8226
    YVYU12_1X24 = 8227
    SBGGR8_1X8 = 12289
    SGBRG8_1X8 = 12307
    SGRBG8_1X8 = 12290
    SRGGB8_1X8 = 12308
    SBGGR10_ALAW8_1X8 = 12309
    SGBRG10_ALAW8_1X8 = 12310
    SGRBG10_ALAW8_1X8 = 12311
    SRGGB10_ALAW8_1X8 = 12312
    SBGGR10_DPCM8_1X8 = 12299
    SGBRG10_DPCM8_1X8 = 12300
    SGRBG10_DPCM8_1X8 = 12297
    SRGGB10_DPCM8_1X8 = 12301
    SBGGR10_2X8_PADHI_BE = 12291
    SBGGR10_2X8_PADHI_LE = 12292
    SBGGR10_2X8_PADLO_BE = 12293
    SBGGR10_2X8_PADLO_LE = 12294
    SBGGR10_1X10 = 12295
    SGBRG10_1X10 = 12302
    SGRBG10_1X10 = 12298
    SRGGB10_1X10 = 12303
    SBGGR12_1X12 = 12296
    SGBRG12_1X12 = 12304
    SGRBG12_1X12 = 12305
    SRGGB12_1X12 = 12306
    JPEG_1X8 = 16385
    S5C_UYVY_JPEG_1X8 = 20481
    AHSV8888_1X32 = 24577


class SubdevFormatWhence(enum.IntEnum):
    TRY = 0
    ACTIVE = 1


class v4l2_edid(Struct):
    pass


v4l2_edid._fields_ = [
    ("pad", cuint),
    ("start_block", cuint),
    ("blocks", cuint),
    ("reserved", cuint * 5),
    ("edid", POINTER(u8)),
]


class v4l2_ctrl_h264_sps(Struct):
    pass


v4l2_ctrl_h264_sps._fields_ = [
    ("profile_idc", u8),
    ("constraint_set_flags", u8),
    ("level_idc", u8),
    ("seq_parameter_set_id", u8),
    ("chroma_format_idc", u8),
    ("bit_depth_luma_minus8", u8),
    ("bit_depth_chroma_minus8", u8),
    ("log2_max_frame_num_minus4", u8),
    ("pic_order_cnt_type", u8),
    ("log2_max_pic_order_cnt_lsb_minus4", u8),
    ("max_num_ref_frames", u8),
    ("num_ref_frames_in_pic_order_cnt_cycle", u8),
    ("offset_for_ref_frame", cint * 255),
    ("offset_for_non_ref_pic", cint),
    ("offset_for_top_to_bottom_field", cint),
    ("pic_width_in_mbs_minus1", u16),
    ("pic_height_in_map_units_minus1", u16),
    ("flags", cuint),
]


class v4l2_ctrl_h264_pps(Struct):
    pass


v4l2_ctrl_h264_pps._fields_ = [
    ("pic_parameter_set_id", u8),
    ("seq_parameter_set_id", u8),
    ("num_slice_groups_minus1", u8),
    ("num_ref_idx_l0_default_active_minus1", u8),
    ("num_ref_idx_l1_default_active_minus1", u8),
    ("weighted_bipred_idc", u8),
    ("pic_init_qp_minus26", cchar),
    ("pic_init_qs_minus26", cchar),
    ("chroma_qp_index_offset", cchar),
    ("second_chroma_qp_index_offset", cchar),
    ("flags", u16),
]


class v4l2_ctrl_h264_scaling_matrix(Struct):
    _pack_ = True


v4l2_ctrl_h264_scaling_matrix._fields_ = [("scaling_list_4x4", cchar * 16 * 6), ("scaling_list_8x8", cchar * 64 * 6)]


class v4l2_h264_weight_factors(Struct):
    pass


v4l2_h264_weight_factors._fields_ = [
    ("luma_weight", i16 * 32),
    ("luma_offset", i16 * 32),
    ("chroma_weight", i16 * 2 * 32),
    ("chroma_offset", i16 * 2 * 32),
]


class v4l2_ctrl_h264_pred_weights(Struct):
    pass


v4l2_ctrl_h264_pred_weights._fields_ = [
    ("luma_log2_weight_denom", u16),
    ("chroma_log2_weight_denom", u16),
    ("weight_factors", v4l2_h264_weight_factors * 2),
]


class v4l2_h264_reference(Struct):
    _pack_ = True


v4l2_h264_reference._fields_ = [("fields", u8), ("index", u8)]


class v4l2_ctrl_h264_slice_params(Struct):
    pass


v4l2_ctrl_h264_slice_params._fields_ = [
    ("header_bit_size", cuint),
    ("first_mb_in_slice", cuint),
    ("slice_type", u8),
    ("colour_plane_id", u8),
    ("redundant_pic_cnt", u8),
    ("cabac_init_idc", u8),
    ("slice_qp_delta", cchar),
    ("slice_qs_delta", cchar),
    ("disable_deblocking_filter_idc", u8),
    ("slice_alpha_c0_offset_div2", cchar),
    ("slice_beta_offset_div2", cchar),
    ("num_ref_idx_l0_active_minus1", u8),
    ("num_ref_idx_l1_active_minus1", u8),
    ("reserved", u8),
    ("ref_pic_list0", v4l2_h264_reference * 32),
    ("ref_pic_list1", v4l2_h264_reference * 32),
    ("flags", cuint),
]


class v4l2_h264_dpb_entry(Struct):
    pass


v4l2_h264_dpb_entry._fields_ = [
    ("reference_ts", culonglong),
    ("pic_num", cuint),
    ("frame_num", u16),
    ("fields", u8),
    ("reserved", cchar * 5),
    ("top_field_order_cnt", cint),
    ("bottom_field_order_cnt", cint),
    ("flags", cuint),
]


class v4l2_ctrl_h264_decode_params(Struct):
    pass


v4l2_ctrl_h264_decode_params._fields_ = [
    ("dpb", v4l2_h264_dpb_entry * 16),
    ("nal_ref_idc", u16),
    ("frame_num", u16),
    ("top_field_order_cnt", cint),
    ("bottom_field_order_cnt", cint),
    ("idr_pic_id", u16),
    ("pic_order_cnt_lsb", u16),
    ("delta_pic_order_cnt_bottom", cint),
    ("delta_pic_order_cnt0", cint),
    ("delta_pic_order_cnt1", cint),
    ("dec_ref_pic_marking_bit_size", cuint),
    ("pic_order_cnt_bit_size", cuint),
    ("slice_group_change_cycle", cuint),
    ("reserved", cuint),
    ("flags", cuint),
]


class v4l2_ctrl_fwht_params(Struct):
    pass


v4l2_ctrl_fwht_params._fields_ = [
    ("backward_ref_ts", culonglong),
    ("version", cuint),
    ("width", cuint),
    ("height", cuint),
    ("flags", cuint),
    ("colorspace", cuint),
    ("xfer_func", cuint),
    ("ycbcr_enc", cuint),
    ("quantization", cuint),
]


class v4l2_vp8_segment(Struct):
    pass


v4l2_vp8_segment._fields_ = [
    ("quant_update", cchar * 4),
    ("lf_update", cchar * 4),
    ("segment_probs", cchar * 3),
    ("padding", u8),
    ("flags", cuint),
]


class v4l2_vp8_loop_filter(Struct):
    pass


v4l2_vp8_loop_filter._fields_ = [
    ("ref_frm_delta", cchar * 4),
    ("mb_mode_delta", cchar * 4),
    ("sharpness_level", u8),
    ("level", u8),
    ("padding", u16),
    ("flags", cuint),
]


class v4l2_vp8_quantization(Struct):
    pass


v4l2_vp8_quantization._fields_ = [
    ("y_ac_qi", u8),
    ("y_dc_delta", cchar),
    ("y2_dc_delta", cchar),
    ("y2_ac_delta", cchar),
    ("uv_dc_delta", cchar),
    ("uv_ac_delta", cchar),
    ("padding", u16),
]


class v4l2_vp8_entropy(Struct):
    _pack_ = True


v4l2_vp8_entropy._fields_ = [
    ("coeff_probs", cchar * 11 * 3 * 8 * 4),
    ("y_mode_probs", cchar * 4),
    ("uv_mode_probs", cchar * 3),
    ("mv_probs", cchar * 19 * 2),
    ("padding", cchar * 3),
]


class v4l2_vp8_entropy_coder_state(Struct):
    _pack_ = True


v4l2_vp8_entropy_coder_state._fields_ = [("range", u8), ("value", u8), ("bit_count", u8), ("padding", u8)]


class v4l2_ctrl_vp8_frame(Struct):
    pass


v4l2_ctrl_vp8_frame._fields_ = [
    ("segment", v4l2_vp8_segment),
    ("lf", v4l2_vp8_loop_filter),
    ("quant", v4l2_vp8_quantization),
    ("entropy", v4l2_vp8_entropy),
    ("coder_state", v4l2_vp8_entropy_coder_state),
    ("width", u16),
    ("height", u16),
    ("horizontal_scale", u8),
    ("vertical_scale", u8),
    ("version", u8),
    ("prob_skip_false", u8),
    ("prob_intra", u8),
    ("prob_last", u8),
    ("prob_gf", u8),
    ("num_dct_parts", u8),
    ("first_part_size", cuint),
    ("first_part_header_bits", cuint),
    ("dct_part_sizes", cuint * 8),
    ("last_frame_ts", culonglong),
    ("golden_frame_ts", culonglong),
    ("alt_frame_ts", culonglong),
    ("flags", culonglong),
]


class v4l2_ctrl_mpeg2_sequence(Struct):
    pass


v4l2_ctrl_mpeg2_sequence._fields_ = [
    ("horizontal_size", u16),
    ("vertical_size", u16),
    ("vbv_buffer_size", cuint),
    ("profile_and_level_indication", u16),
    ("chroma_format", u8),
    ("flags", u8),
]


class v4l2_ctrl_mpeg2_picture(Struct):
    pass


v4l2_ctrl_mpeg2_picture._fields_ = [
    ("backward_ref_ts", culonglong),
    ("forward_ref_ts", culonglong),
    ("flags", cuint),
    ("f_code", cchar * 2 * 2),
    ("picture_coding_type", u8),
    ("picture_structure", u8),
    ("intra_dc_precision", u8),
    ("reserved", cchar * 5),
]


class v4l2_ctrl_mpeg2_quantisation(Struct):
    _pack_ = True


v4l2_ctrl_mpeg2_quantisation._fields_ = [
    ("intra_quantiser_matrix", cchar * 64),
    ("non_intra_quantiser_matrix", cchar * 64),
    ("chroma_intra_quantiser_matrix", cchar * 64),
    ("chroma_non_intra_quantiser_matrix", cchar * 64),
]


class v4l2_ctrl_hevc_sps(Struct):
    pass


v4l2_ctrl_hevc_sps._fields_ = [
    ("video_parameter_set_id", u8),
    ("seq_parameter_set_id", u8),
    ("pic_width_in_luma_samples", u16),
    ("pic_height_in_luma_samples", u16),
    ("bit_depth_luma_minus8", u8),
    ("bit_depth_chroma_minus8", u8),
    ("log2_max_pic_order_cnt_lsb_minus4", u8),
    ("sps_max_dec_pic_buffering_minus1", u8),
    ("sps_max_num_reorder_pics", u8),
    ("sps_max_latency_increase_plus1", u8),
    ("log2_min_luma_coding_block_size_minus3", u8),
    ("log2_diff_max_min_luma_coding_block_size", u8),
    ("log2_min_luma_transform_block_size_minus2", u8),
    ("log2_diff_max_min_luma_transform_block_size", u8),
    ("max_transform_hierarchy_depth_inter", u8),
    ("max_transform_hierarchy_depth_intra", u8),
    ("pcm_sample_bit_depth_luma_minus1", u8),
    ("pcm_sample_bit_depth_chroma_minus1", u8),
    ("log2_min_pcm_luma_coding_block_size_minus3", u8),
    ("log2_diff_max_min_pcm_luma_coding_block_size", u8),
    ("num_short_term_ref_pic_sets", u8),
    ("num_long_term_ref_pics_sps", u8),
    ("chroma_format_idc", u8),
    ("sps_max_sub_layers_minus1", u8),
    ("reserved", cchar * 6),
    ("flags", culonglong),
]


class v4l2_ctrl_hevc_pps(Struct):
    pass


v4l2_ctrl_hevc_pps._fields_ = [
    ("pic_parameter_set_id", u8),
    ("num_extra_slice_header_bits", u8),
    ("num_ref_idx_l0_default_active_minus1", u8),
    ("num_ref_idx_l1_default_active_minus1", u8),
    ("init_qp_minus26", cchar),
    ("diff_cu_qp_delta_depth", u8),
    ("pps_cb_qp_offset", cchar),
    ("pps_cr_qp_offset", cchar),
    ("num_tile_columns_minus1", u8),
    ("num_tile_rows_minus1", u8),
    ("column_width_minus1", cchar * 20),
    ("row_height_minus1", cchar * 22),
    ("pps_beta_offset_div2", cchar),
    ("pps_tc_offset_div2", cchar),
    ("log2_parallel_merge_level_minus2", u8),
    ("reserved", u8),
    ("flags", culonglong),
]


class v4l2_hevc_dpb_entry(Struct):
    pass


v4l2_hevc_dpb_entry._fields_ = [
    ("timestamp", culonglong),
    ("flags", u8),
    ("field_pic", u8),
    ("reserved", u16),
    ("pic_order_cnt_val", cint),
]


class v4l2_hevc_pred_weight_table(Struct):
    _pack_ = True


v4l2_hevc_pred_weight_table._fields_ = [
    ("delta_luma_weight_l0", cchar * 16),
    ("luma_offset_l0", cchar * 16),
    ("delta_chroma_weight_l0", cchar * 2 * 16),
    ("chroma_offset_l0", cchar * 2 * 16),
    ("delta_luma_weight_l1", cchar * 16),
    ("luma_offset_l1", cchar * 16),
    ("delta_chroma_weight_l1", cchar * 2 * 16),
    ("chroma_offset_l1", cchar * 2 * 16),
    ("luma_log2_weight_denom", u8),
    ("delta_chroma_log2_weight_denom", cchar),
]


class v4l2_ctrl_hevc_slice_params(Struct):
    pass


v4l2_ctrl_hevc_slice_params._fields_ = [
    ("bit_size", cuint),
    ("data_byte_offset", cuint),
    ("num_entry_point_offsets", cuint),
    ("nal_unit_type", u8),
    ("nuh_temporal_id_plus1", u8),
    ("slice_type", u8),
    ("colour_plane_id", u8),
    ("slice_pic_order_cnt", cint),
    ("num_ref_idx_l0_active_minus1", u8),
    ("num_ref_idx_l1_active_minus1", u8),
    ("collocated_ref_idx", u8),
    ("five_minus_max_num_merge_cand", u8),
    ("slice_qp_delta", cchar),
    ("slice_cb_qp_offset", cchar),
    ("slice_cr_qp_offset", cchar),
    ("slice_act_y_qp_offset", cchar),
    ("slice_act_cb_qp_offset", cchar),
    ("slice_act_cr_qp_offset", cchar),
    ("slice_beta_offset_div2", cchar),
    ("slice_tc_offset_div2", cchar),
    ("pic_struct", u8),
    ("reserved0", cchar * 3),
    ("slice_segment_addr", cuint),
    ("ref_idx_l0", cchar * 16),
    ("ref_idx_l1", cchar * 16),
    ("short_term_ref_pic_set_size", u16),
    ("long_term_ref_pic_set_size", u16),
    ("pred_weight_table", v4l2_hevc_pred_weight_table),
    ("reserved1", cchar * 2),
    ("flags", culonglong),
]


class v4l2_ctrl_hevc_decode_params(Struct):
    pass


v4l2_ctrl_hevc_decode_params._fields_ = [
    ("pic_order_cnt_val", cint),
    ("short_term_ref_pic_set_size", u16),
    ("long_term_ref_pic_set_size", u16),
    ("num_active_dpb_entries", u8),
    ("num_poc_st_curr_before", u8),
    ("num_poc_st_curr_after", u8),
    ("num_poc_lt_curr", u8),
    ("poc_st_curr_before", cchar * 16),
    ("poc_st_curr_after", cchar * 16),
    ("poc_lt_curr", cchar * 16),
    ("num_delta_pocs_of_ref_rps_idx", u8),
    ("reserved", cchar * 3),
    ("dpb", v4l2_hevc_dpb_entry * 16),
    ("flags", culonglong),
]


class v4l2_ctrl_hevc_scaling_matrix(Struct):
    _pack_ = True


v4l2_ctrl_hevc_scaling_matrix._fields_ = [
    ("scaling_list_4x4", cchar * 16 * 6),
    ("scaling_list_8x8", cchar * 64 * 6),
    ("scaling_list_16x16", cchar * 64 * 6),
    ("scaling_list_32x32", cchar * 64 * 2),
    ("scaling_list_dc_coef_16x16", cchar * 6),
    ("scaling_list_dc_coef_32x32", cchar * 2),
]


class v4l2_ctrl_hdr10_cll_info(Struct):
    pass


v4l2_ctrl_hdr10_cll_info._fields_ = [("max_content_light_level", u16), ("max_pic_average_light_level", u16)]


class v4l2_ctrl_hdr10_mastering_display(Struct):
    pass


v4l2_ctrl_hdr10_mastering_display._fields_ = [
    ("display_primaries_x", u16 * 3),
    ("display_primaries_y", u16 * 3),
    ("white_point_x", u16),
    ("white_point_y", u16),
    ("max_display_mastering_luminance", cuint),
    ("min_display_mastering_luminance", cuint),
]


class v4l2_vp9_loop_filter(Struct):
    _pack_ = True


v4l2_vp9_loop_filter._fields_ = [
    ("ref_deltas", cchar * 4),
    ("mode_deltas", cchar * 2),
    ("level", u8),
    ("sharpness", u8),
    ("flags", u8),
    ("reserved", cchar * 7),
]


class v4l2_vp9_quantization(Struct):
    _pack_ = True


v4l2_vp9_quantization._fields_ = [
    ("base_q_idx", u8),
    ("delta_q_y_dc", cchar),
    ("delta_q_uv_dc", cchar),
    ("delta_q_uv_ac", cchar),
    ("reserved", cchar * 4),
]


class v4l2_vp9_segmentation(Struct):
    pass


v4l2_vp9_segmentation._fields_ = [
    ("feature_data", i16 * 4 * 8),
    ("feature_enabled", cchar * 8),
    ("tree_probs", cchar * 7),
    ("pred_probs", cchar * 3),
    ("flags", u8),
    ("reserved", cchar * 5),
]


class v4l2_ctrl_vp9_frame(Struct):
    pass


v4l2_ctrl_vp9_frame._fields_ = [
    ("lf", v4l2_vp9_loop_filter),
    ("quant", v4l2_vp9_quantization),
    ("seg", v4l2_vp9_segmentation),
    ("flags", cuint),
    ("compressed_header_size", u16),
    ("uncompressed_header_size", u16),
    ("frame_width_minus_1", u16),
    ("frame_height_minus_1", u16),
    ("render_width_minus_1", u16),
    ("render_height_minus_1", u16),
    ("last_frame_ts", culonglong),
    ("golden_frame_ts", culonglong),
    ("alt_frame_ts", culonglong),
    ("ref_frame_sign_bias", u8),
    ("reset_frame_context", u8),
    ("frame_context_idx", u8),
    ("profile", u8),
    ("bit_depth", u8),
    ("interpolation_filter", u8),
    ("tile_cols_log2", u8),
    ("tile_rows_log2", u8),
    ("reference_mode", u8),
    ("reserved", cchar * 7),
]


class v4l2_vp9_mv_probs(Struct):
    _pack_ = True


v4l2_vp9_mv_probs._fields_ = [
    ("joint", cchar * 3),
    ("sign", cchar * 2),
    ("classes", cchar * 10 * 2),
    ("class0_bit", cchar * 2),
    ("bits", cchar * 10 * 2),
    ("class0_fr", cchar * 3 * 2 * 2),
    ("fr", cchar * 3 * 2),
    ("class0_hp", cchar * 2),
    ("hp", cchar * 2),
]


class v4l2_ctrl_vp9_compressed_hdr(Struct):
    _pack_ = True


v4l2_ctrl_vp9_compressed_hdr._fields_ = [
    ("tx_mode", u8),
    ("tx8", cchar * 1 * 2),
    ("tx16", cchar * 2 * 2),
    ("tx32", cchar * 3 * 2),
    ("coef", cchar * 3 * 6 * 6 * 2 * 2 * 4),
    ("skip", cchar * 3),
    ("inter_mode", cchar * 3 * 7),
    ("interp_filter", cchar * 2 * 4),
    ("is_inter", cchar * 4),
    ("comp_mode", cchar * 5),
    ("single_ref", cchar * 2 * 5),
    ("comp_ref", cchar * 5),
    ("y_mode", cchar * 9 * 4),
    ("uv_mode", cchar * 9 * 10),
    ("partition", cchar * 3 * 16),
    ("mv", v4l2_vp9_mv_probs),
]


class v4l2_ctrl_av1_sequence(Struct):
    pass


v4l2_ctrl_av1_sequence._fields_ = [
    ("flags", cuint),
    ("seq_profile", u8),
    ("order_hint_bits", u8),
    ("bit_depth", u8),
    ("reserved", u8),
    ("max_frame_width_minus_1", u16),
    ("max_frame_height_minus_1", u16),
]


class v4l2_ctrl_av1_tile_group_entry(Struct):
    pass


v4l2_ctrl_av1_tile_group_entry._fields_ = [
    ("tile_offset", cuint),
    ("tile_size", cuint),
    ("tile_row", cuint),
    ("tile_col", cuint),
]


class v4l2_av1_global_motion(Struct):
    pass


v4l2_av1_global_motion._fields_ = [
    ("flags", cchar * 8),
    ("type", cuint * 8),
    ("params", cint * 6 * 8),
    ("invalid", u8),
    ("reserved", cchar * 3),
]


class v4l2_av1_loop_restoration(Struct):
    pass


v4l2_av1_loop_restoration._fields_ = [
    ("flags", u8),
    ("lr_unit_shift", u8),
    ("lr_uv_shift", u8),
    ("reserved", u8),
    ("frame_restoration_type", cuint * 3),
    ("loop_restoration_size", cuint * 3),
]


class v4l2_av1_cdef(Struct):
    _pack_ = True


v4l2_av1_cdef._fields_ = [
    ("damping_minus_3", u8),
    ("bits", u8),
    ("y_pri_strength", cchar * 8),
    ("y_sec_strength", cchar * 8),
    ("uv_pri_strength", cchar * 8),
    ("uv_sec_strength", cchar * 8),
]


class v4l2_av1_segmentation(Struct):
    pass


v4l2_av1_segmentation._fields_ = [
    ("flags", u8),
    ("last_active_seg_id", u8),
    ("feature_enabled", cchar * 8),
    ("feature_data", i16 * 8 * 8),
]


class v4l2_av1_loop_filter(Struct):
    _pack_ = True


v4l2_av1_loop_filter._fields_ = [
    ("flags", u8),
    ("level", cchar * 4),
    ("sharpness", u8),
    ("ref_deltas", cchar * 8),
    ("mode_deltas", cchar * 2),
    ("delta_lf_res", u8),
]


class v4l2_av1_quantization(Struct):
    _pack_ = True


v4l2_av1_quantization._fields_ = [
    ("flags", u8),
    ("base_q_idx", u8),
    ("delta_q_y_dc", cchar),
    ("delta_q_u_dc", cchar),
    ("delta_q_u_ac", cchar),
    ("delta_q_v_dc", cchar),
    ("delta_q_v_ac", cchar),
    ("qm_y", u8),
    ("qm_u", u8),
    ("qm_v", u8),
    ("delta_q_res", u8),
]


class v4l2_av1_tile_info(Struct):
    pass


v4l2_av1_tile_info._fields_ = [
    ("flags", u8),
    ("context_update_tile_id", u8),
    ("tile_cols", u8),
    ("tile_rows", u8),
    ("mi_col_starts", cuint * 65),
    ("mi_row_starts", cuint * 65),
    ("width_in_sbs_minus_1", cuint * 64),
    ("height_in_sbs_minus_1", cuint * 64),
    ("tile_size_bytes", u8),
    ("reserved", cchar * 3),
]


class v4l2_ctrl_av1_frame(Struct):
    pass


v4l2_ctrl_av1_frame._fields_ = [
    ("tile_info", v4l2_av1_tile_info),
    ("quantization", v4l2_av1_quantization),
    ("superres_denom", u8),
    ("segmentation", v4l2_av1_segmentation),
    ("loop_filter", v4l2_av1_loop_filter),
    ("cdef", v4l2_av1_cdef),
    ("skip_mode_frame", cchar * 2),
    ("primary_ref_frame", u8),
    ("loop_restoration", v4l2_av1_loop_restoration),
    ("global_motion", v4l2_av1_global_motion),
    ("flags", cuint),
    ("frame_type", cuint),
    ("order_hint", cuint),
    ("upscaled_width", cuint),
    ("interpolation_filter", cuint),
    ("tx_mode", cuint),
    ("frame_width_minus_1", cuint),
    ("frame_height_minus_1", cuint),
    ("render_width_minus_1", u16),
    ("render_height_minus_1", u16),
    ("current_frame_id", cuint),
    ("buffer_removal_time", cuint * 32),
    ("reserved", cchar * 4),
    ("order_hints", cuint * 8),
    ("reference_frame_ts", culonglong * 8),
    ("ref_frame_idx", cchar * 7),
    ("refresh_frame_flags", u8),
]


class v4l2_ctrl_av1_film_grain(Struct):
    pass


v4l2_ctrl_av1_film_grain._fields_ = [
    ("flags", u8),
    ("cr_mult", u8),
    ("grain_seed", u16),
    ("film_grain_params_ref_idx", u8),
    ("num_y_points", u8),
    ("point_y_value", cchar * 16),
    ("point_y_scaling", cchar * 16),
    ("num_cb_points", u8),
    ("point_cb_value", cchar * 16),
    ("point_cb_scaling", cchar * 16),
    ("num_cr_points", u8),
    ("point_cr_value", cchar * 16),
    ("point_cr_scaling", cchar * 16),
    ("grain_scaling_minus_8", u8),
    ("ar_coeff_lag", u8),
    ("ar_coeffs_y_plus_128", cchar * 25),
    ("ar_coeffs_cb_plus_128", cchar * 25),
    ("ar_coeffs_cr_plus_128", cchar * 25),
    ("ar_coeff_shift_minus_6", u8),
    ("grain_scale_shift", u8),
    ("cb_mult", u8),
    ("cb_luma_mult", u8),
    ("cr_luma_mult", u8),
    ("cb_offset", u16),
    ("cr_offset", u16),
    ("reserved", cchar * 4),
]


class v4l2_rect(Struct):
    pass


v4l2_rect._fields_ = [("left", cint), ("top", cint), ("width", cuint), ("height", cuint)]


class v4l2_fract(Struct):
    pass


v4l2_fract._fields_ = [("numerator", cuint), ("denominator", cuint)]


class v4l2_area(Struct):
    pass


v4l2_area._fields_ = [("width", cuint), ("height", cuint)]


class v4l2_capability(Struct):
    pass


v4l2_capability._fields_ = [
    ("driver", cchar * 16),
    ("card", cchar * 32),
    ("bus_info", cchar * 32),
    ("version", cuint),
    ("capabilities", cuint),
    ("device_caps", cuint),
    ("reserved", cuint * 3),
]


class v4l2_pix_format(Struct):
    class M1(Union):
        pass

    M1._fields_ = [("ycbcr_enc", cuint), ("hsv_enc", cuint)]

    _anonymous_ = ("m1",)


v4l2_pix_format._fields_ = [
    ("width", cuint),
    ("height", cuint),
    ("pixelformat", cuint),
    ("field", cuint),
    ("bytesperline", cuint),
    ("sizeimage", cuint),
    ("colorspace", cuint),
    ("priv", cuint),
    ("flags", cuint),
    ("m1", v4l2_pix_format.M1),
    ("quantization", cuint),
    ("xfer_func", cuint),
]


class v4l2_fmtdesc(Struct):
    pass


v4l2_fmtdesc._fields_ = [
    ("index", cuint),
    ("type", cuint),
    ("flags", cuint),
    ("description", cchar * 32),
    ("pixelformat", cuint),
    ("mbus_code", cuint),
    ("reserved", cuint * 3),
]


class v4l2_frmsize_discrete(Struct):
    pass


v4l2_frmsize_discrete._fields_ = [("width", cuint), ("height", cuint)]


class v4l2_frmsize_stepwise(Struct):
    pass


v4l2_frmsize_stepwise._fields_ = [
    ("min_width", cuint),
    ("max_width", cuint),
    ("step_width", cuint),
    ("min_height", cuint),
    ("max_height", cuint),
    ("step_height", cuint),
]


class v4l2_frmsizeenum(Struct):
    class M1(Union):
        pass

    M1._fields_ = [("discrete", v4l2_frmsize_discrete), ("stepwise", v4l2_frmsize_stepwise)]

    _anonymous_ = ("m1",)


v4l2_frmsizeenum._fields_ = [
    ("index", cuint),
    ("pixel_format", cuint),
    ("type", cuint),
    ("m1", v4l2_frmsizeenum.M1),
    ("reserved", cuint * 2),
]


class v4l2_frmival_stepwise(Struct):
    pass


v4l2_frmival_stepwise._fields_ = [("min", v4l2_fract), ("max", v4l2_fract), ("step", v4l2_fract)]


class v4l2_frmivalenum(Struct):
    class M1(Union):
        pass

    M1._fields_ = [("discrete", v4l2_fract), ("stepwise", v4l2_frmival_stepwise)]

    _anonymous_ = ("m1",)


v4l2_frmivalenum._fields_ = [
    ("index", cuint),
    ("pixel_format", cuint),
    ("width", cuint),
    ("height", cuint),
    ("type", cuint),
    ("m1", v4l2_frmivalenum.M1),
    ("reserved", cuint * 2),
]


class v4l2_timecode(Struct):
    pass


v4l2_timecode._fields_ = [
    ("type", cuint),
    ("flags", cuint),
    ("frames", u8),
    ("seconds", u8),
    ("minutes", u8),
    ("hours", u8),
    ("userbits", cchar * 4),
]


class v4l2_jpegcompression(Struct):
    pass


v4l2_jpegcompression._fields_ = [
    ("quality", cint),
    ("APPn", cint),
    ("APP_len", cint),
    ("APP_data", cchar * 60),
    ("COM_len", cint),
    ("COM_data", cchar * 60),
    ("jpeg_markers", cuint),
]


class v4l2_requestbuffers(Struct):
    pass


v4l2_requestbuffers._fields_ = [
    ("count", cuint),
    ("type", cuint),
    ("memory", cuint),
    ("capabilities", cuint),
    ("flags", u8),
    ("reserved", cchar * 3),
]


class v4l2_plane(Struct):
    class M1(Union):
        pass

    M1._fields_ = [("mem_offset", cuint), ("userptr", culong), ("fd", cint)]


v4l2_plane._fields_ = [
    ("bytesused", cuint),
    ("length", cuint),
    ("m", v4l2_plane.M1),
    ("data_offset", cuint),
    ("reserved", cuint * 11),
]


class v4l2_buffer(Struct):
    class M1(Union):
        pass

    M1._fields_ = [("offset", cuint), ("userptr", culong), ("planes", POINTER(v4l2_plane)), ("fd", cint)]

    class M2(Union):
        pass

    M2._fields_ = [("request_fd", cint), ("reserved", cuint)]

    _anonymous_ = ("m2",)


v4l2_buffer._fields_ = [
    ("index", cuint),
    ("type", cuint),
    ("bytesused", cuint),
    ("flags", cuint),
    ("field", cuint),
    ("timestamp", timeval),
    ("timecode", v4l2_timecode),
    ("sequence", cuint),
    ("memory", cuint),
    ("m", v4l2_buffer.M1),
    ("length", cuint),
    ("reserved2", cuint),
    ("m2", v4l2_buffer.M2),
]


class v4l2_exportbuffer(Struct):
    pass


v4l2_exportbuffer._fields_ = [
    ("type", cuint),
    ("index", cuint),
    ("plane", cuint),
    ("flags", cuint),
    ("fd", cint),
    ("reserved", cuint * 11),
]


class v4l2_framebuffer(Struct):
    class M1(Struct):
        pass

    M1._fields_ = [
        ("width", cuint),
        ("height", cuint),
        ("pixelformat", cuint),
        ("field", cuint),
        ("bytesperline", cuint),
        ("sizeimage", cuint),
        ("colorspace", cuint),
        ("priv", cuint),
    ]


v4l2_framebuffer._fields_ = [
    ("capability", cuint),
    ("flags", cuint),
    ("base", POINTER(None)),
    ("fmt", v4l2_framebuffer.M1),
]


class v4l2_clip(Struct):
    pass


v4l2_clip._fields_ = [("c", v4l2_rect), ("next", POINTER(v4l2_clip))]


class v4l2_window(Struct):
    pass


v4l2_window._fields_ = [
    ("w", v4l2_rect),
    ("field", cuint),
    ("chromakey", cuint),
    ("clips", POINTER(v4l2_clip)),
    ("clipcount", cuint),
    ("bitmap", POINTER(None)),
    ("global_alpha", u8),
]


class v4l2_captureparm(Struct):
    pass


v4l2_captureparm._fields_ = [
    ("capability", cuint),
    ("capturemode", cuint),
    ("timeperframe", v4l2_fract),
    ("extendedmode", cuint),
    ("readbuffers", cuint),
    ("reserved", cuint * 4),
]


class v4l2_outputparm(Struct):
    pass


v4l2_outputparm._fields_ = [
    ("capability", cuint),
    ("outputmode", cuint),
    ("timeperframe", v4l2_fract),
    ("extendedmode", cuint),
    ("writebuffers", cuint),
    ("reserved", cuint * 4),
]


class v4l2_cropcap(Struct):
    pass


v4l2_cropcap._fields_ = [("type", cuint), ("bounds", v4l2_rect), ("defrect", v4l2_rect), ("pixelaspect", v4l2_fract)]


class v4l2_crop(Struct):
    pass


v4l2_crop._fields_ = [("type", cuint), ("c", v4l2_rect)]


class v4l2_selection(Struct):
    pass


v4l2_selection._fields_ = [
    ("type", cuint),
    ("target", cuint),
    ("flags", cuint),
    ("r", v4l2_rect),
    ("reserved", cuint * 9),
]


class v4l2_standard(Struct):
    pass


v4l2_standard._fields_ = [
    ("index", cuint),
    ("id", culonglong),
    ("name", cchar * 24),
    ("frameperiod", v4l2_fract),
    ("framelines", cuint),
    ("reserved", cuint * 4),
]


class v4l2_bt_timings(Struct):
    _pack_ = True


v4l2_bt_timings._fields_ = [
    ("width", cuint),
    ("height", cuint),
    ("interlaced", cuint),
    ("polarities", cuint),
    ("pixelclock", culonglong),
    ("hfrontporch", cuint),
    ("hsync", cuint),
    ("hbackporch", cuint),
    ("vfrontporch", cuint),
    ("vsync", cuint),
    ("vbackporch", cuint),
    ("il_vfrontporch", cuint),
    ("il_vsync", cuint),
    ("il_vbackporch", cuint),
    ("standards", cuint),
    ("flags", cuint),
    ("picture_aspect", v4l2_fract),
    ("cea861_vic", u8),
    ("hdmi_vic", u8),
    ("reserved", cchar * 46),
]


class v4l2_dv_timings(Struct):
    _pack_ = True

    class M1(Union):
        pass

    M1._fields_ = [("bt", v4l2_bt_timings), ("reserved", cuint * 32)]

    _anonymous_ = ("m1",)


v4l2_dv_timings._fields_ = [("type", cuint), ("m1", v4l2_dv_timings.M1)]


class v4l2_enum_dv_timings(Struct):
    pass


v4l2_enum_dv_timings._fields_ = [
    ("index", cuint),
    ("pad", cuint),
    ("reserved", cuint * 2),
    ("timings", v4l2_dv_timings),
]


class v4l2_bt_timings_cap(Struct):
    _pack_ = True


v4l2_bt_timings_cap._fields_ = [
    ("min_width", cuint),
    ("max_width", cuint),
    ("min_height", cuint),
    ("max_height", cuint),
    ("min_pixelclock", culonglong),
    ("max_pixelclock", culonglong),
    ("standards", cuint),
    ("capabilities", cuint),
    ("reserved", cuint * 16),
]


class v4l2_dv_timings_cap(Struct):
    class M1(Union):
        pass

    M1._fields_ = [("bt", v4l2_bt_timings_cap), ("raw_data", cuint * 32)]

    _anonymous_ = ("m1",)


v4l2_dv_timings_cap._fields_ = [
    ("type", cuint),
    ("pad", cuint),
    ("reserved", cuint * 2),
    ("m1", v4l2_dv_timings_cap.M1),
]


class v4l2_input(Struct):
    pass


v4l2_input._fields_ = [
    ("index", cuint),
    ("name", cchar * 32),
    ("type", cuint),
    ("audioset", cuint),
    ("tuner", cuint),
    ("std", culonglong),
    ("status", cuint),
    ("capabilities", cuint),
    ("reserved", cuint * 3),
]


class v4l2_output(Struct):
    pass


v4l2_output._fields_ = [
    ("index", cuint),
    ("name", cchar * 32),
    ("type", cuint),
    ("audioset", cuint),
    ("modulator", cuint),
    ("std", culonglong),
    ("capabilities", cuint),
    ("reserved", cuint * 3),
]


class v4l2_control(Struct):
    pass


v4l2_control._fields_ = [("id", cuint), ("value", cint)]


class v4l2_ext_control(Struct):
    _pack_ = True

    class M1(Union):
        _pack_ = True

    M1._fields_ = [
        ("value", cint),
        ("value64", clonglong),
        ("string", POINTER(cchar)),
        ("p_u8", POINTER(u8)),
        ("p_u16", POINTER(u16)),
        ("p_u32", POINTER(cuint)),
        ("p_s32", POINTER(cint)),
        ("p_s64", POINTER(clonglong)),
        ("p_area", POINTER(v4l2_area)),
        ("p_h264_sps", POINTER(v4l2_ctrl_h264_sps)),
        ("p_h264_pps", POINTER(v4l2_ctrl_h264_pps)),
        ("p_h264_scaling_matrix", POINTER(v4l2_ctrl_h264_scaling_matrix)),
        ("p_h264_pred_weights", POINTER(v4l2_ctrl_h264_pred_weights)),
        ("p_h264_slice_params", POINTER(v4l2_ctrl_h264_slice_params)),
        ("p_h264_decode_params", POINTER(v4l2_ctrl_h264_decode_params)),
        ("p_fwht_params", POINTER(v4l2_ctrl_fwht_params)),
        ("p_vp8_frame", POINTER(v4l2_ctrl_vp8_frame)),
        ("p_mpeg2_sequence", POINTER(v4l2_ctrl_mpeg2_sequence)),
        ("p_mpeg2_picture", POINTER(v4l2_ctrl_mpeg2_picture)),
        ("p_mpeg2_quantisation", POINTER(v4l2_ctrl_mpeg2_quantisation)),
        ("p_vp9_compressed_hdr_probs", POINTER(v4l2_ctrl_vp9_compressed_hdr)),
        ("p_vp9_frame", POINTER(v4l2_ctrl_vp9_frame)),
        ("p_hevc_sps", POINTER(v4l2_ctrl_hevc_sps)),
        ("p_hevc_pps", POINTER(v4l2_ctrl_hevc_pps)),
        ("p_hevc_slice_params", POINTER(v4l2_ctrl_hevc_slice_params)),
        ("p_hevc_scaling_matrix", POINTER(v4l2_ctrl_hevc_scaling_matrix)),
        ("p_hevc_decode_params", POINTER(v4l2_ctrl_hevc_decode_params)),
        ("p_av1_sequence", POINTER(v4l2_ctrl_av1_sequence)),
        ("p_av1_tile_group_entry", POINTER(v4l2_ctrl_av1_tile_group_entry)),
        ("p_av1_frame", POINTER(v4l2_ctrl_av1_frame)),
        ("p_av1_film_grain", POINTER(v4l2_ctrl_av1_film_grain)),
        ("p_hdr10_cll_info", POINTER(v4l2_ctrl_hdr10_cll_info)),
        ("p_hdr10_mastering_display", POINTER(v4l2_ctrl_hdr10_mastering_display)),
        ("ptr", POINTER(None)),
    ]

    _anonymous_ = ("m1",)


v4l2_ext_control._fields_ = [("id", cuint), ("size", cuint), ("reserved2", cuint * 1), ("m1", v4l2_ext_control.M1)]


class v4l2_ext_controls(Struct):
    class M1(Union):
        pass

    M1._fields_ = [("ctrl_class", cuint), ("which", cuint)]

    _anonymous_ = ("m1",)


v4l2_ext_controls._fields_ = [
    ("m1", v4l2_ext_controls.M1),
    ("count", cuint),
    ("error_idx", cuint),
    ("request_fd", cint),
    ("reserved", cuint * 1),
    ("controls", POINTER(v4l2_ext_control)),
]


class v4l2_queryctrl(Struct):
    pass


v4l2_queryctrl._fields_ = [
    ("id", cuint),
    ("type", cuint),
    ("name", cchar * 32),
    ("minimum", cint),
    ("maximum", cint),
    ("step", cint),
    ("default_value", cint),
    ("flags", cuint),
    ("reserved", cuint * 2),
]


class v4l2_query_ext_ctrl(Struct):
    pass


v4l2_query_ext_ctrl._fields_ = [
    ("id", cuint),
    ("type", cuint),
    ("name", cchar * 32),
    ("minimum", clonglong),
    ("maximum", clonglong),
    ("step", culonglong),
    ("default_value", clonglong),
    ("flags", cuint),
    ("elem_size", cuint),
    ("elems", cuint),
    ("nr_of_dims", cuint),
    ("dims", cuint * 4),
    ("reserved", cuint * 32),
]


class v4l2_querymenu(Struct):
    _pack_ = True

    class M1(Union):
        pass

    M1._fields_ = [("name", cchar * 32), ("value", clonglong)]

    _anonymous_ = ("m1",)


v4l2_querymenu._fields_ = [("id", cuint), ("index", cuint), ("m1", v4l2_querymenu.M1), ("reserved", cuint)]


class v4l2_tuner(Struct):
    pass


v4l2_tuner._fields_ = [
    ("index", cuint),
    ("name", cchar * 32),
    ("type", cuint),
    ("capability", cuint),
    ("rangelow", cuint),
    ("rangehigh", cuint),
    ("rxsubchans", cuint),
    ("audmode", cuint),
    ("signal", cint),
    ("afc", cint),
    ("reserved", cuint * 4),
]


class v4l2_modulator(Struct):
    pass


v4l2_modulator._fields_ = [
    ("index", cuint),
    ("name", cchar * 32),
    ("capability", cuint),
    ("rangelow", cuint),
    ("rangehigh", cuint),
    ("txsubchans", cuint),
    ("type", cuint),
    ("reserved", cuint * 3),
]


class v4l2_frequency(Struct):
    pass


v4l2_frequency._fields_ = [("tuner", cuint), ("type", cuint), ("frequency", cuint), ("reserved", cuint * 8)]


class v4l2_frequency_band(Struct):
    pass


v4l2_frequency_band._fields_ = [
    ("tuner", cuint),
    ("type", cuint),
    ("index", cuint),
    ("capability", cuint),
    ("rangelow", cuint),
    ("rangehigh", cuint),
    ("modulation", cuint),
    ("reserved", cuint * 9),
]


class v4l2_hw_freq_seek(Struct):
    pass


v4l2_hw_freq_seek._fields_ = [
    ("tuner", cuint),
    ("type", cuint),
    ("seek_upward", cuint),
    ("wrap_around", cuint),
    ("spacing", cuint),
    ("rangelow", cuint),
    ("rangehigh", cuint),
    ("reserved", cuint * 5),
]


class v4l2_rds_data(Struct):
    _pack_ = True


v4l2_rds_data._fields_ = [("lsb", u8), ("msb", u8), ("block", u8)]


class v4l2_audio(Struct):
    pass


v4l2_audio._fields_ = [
    ("index", cuint),
    ("name", cchar * 32),
    ("capability", cuint),
    ("mode", cuint),
    ("reserved", cuint * 2),
]


class v4l2_audioout(Struct):
    pass


v4l2_audioout._fields_ = [
    ("index", cuint),
    ("name", cchar * 32),
    ("capability", cuint),
    ("mode", cuint),
    ("reserved", cuint * 2),
]


class v4l2_enc_idx_entry(Struct):
    pass


v4l2_enc_idx_entry._fields_ = [
    ("offset", culonglong),
    ("pts", culonglong),
    ("length", cuint),
    ("flags", cuint),
    ("reserved", cuint * 2),
]


class v4l2_enc_idx(Struct):
    pass


v4l2_enc_idx._fields_ = [
    ("entries", cuint),
    ("entries_cap", cuint),
    ("reserved", cuint * 4),
    ("entry", v4l2_enc_idx_entry * 64),
]


class v4l2_encoder_cmd(Struct):
    class M1(Union):
        class M1(Struct):
            pass

        M1._fields_ = [("data", cuint * 8)]

    M1._fields_ = [("raw", M1.M1)]

    _anonymous_ = ("m1",)


v4l2_encoder_cmd._fields_ = [("cmd", cuint), ("flags", cuint), ("m1", v4l2_encoder_cmd.M1)]


class v4l2_decoder_cmd(Struct):
    class M1(Union):
        class M1(Struct):
            pass

        M1._fields_ = [("pts", culonglong)]

        class M2(Struct):
            pass

        M2._fields_ = [("speed", cint), ("format", cuint)]

        class M3(Struct):
            pass

        M3._fields_ = [("data", cuint * 16)]

    M1._fields_ = [("stop", M1.M1), ("start", M1.M2), ("raw", M1.M3)]

    _anonymous_ = ("m1",)


v4l2_decoder_cmd._fields_ = [("cmd", cuint), ("flags", cuint), ("m1", v4l2_decoder_cmd.M1)]


class v4l2_vbi_format(Struct):
    pass


v4l2_vbi_format._fields_ = [
    ("sampling_rate", cuint),
    ("offset", cuint),
    ("samples_per_line", cuint),
    ("sample_format", cuint),
    ("start", cint * 2),
    ("count", cuint * 2),
    ("flags", cuint),
    ("reserved", cuint * 2),
]


class v4l2_sliced_vbi_format(Struct):
    pass


v4l2_sliced_vbi_format._fields_ = [
    ("service_set", u16),
    ("service_lines", u16 * 24 * 2),
    ("io_size", cuint),
    ("reserved", cuint * 2),
]


class v4l2_sliced_vbi_cap(Struct):
    pass


v4l2_sliced_vbi_cap._fields_ = [
    ("service_set", u16),
    ("service_lines", u16 * 24 * 2),
    ("type", cuint),
    ("reserved", cuint * 3),
]


class v4l2_sliced_vbi_data(Struct):
    pass


v4l2_sliced_vbi_data._fields_ = [
    ("id", cuint),
    ("field", cuint),
    ("line", cuint),
    ("reserved", cuint),
    ("data", cchar * 48),
]


class v4l2_mpeg_vbi_itv0_line(Struct):
    _pack_ = True


v4l2_mpeg_vbi_itv0_line._fields_ = [("id", u8), ("data", cchar * 42)]


class v4l2_mpeg_vbi_itv0(Struct):
    _pack_ = True


v4l2_mpeg_vbi_itv0._fields_ = [("linemask", cuint * 2), ("line", v4l2_mpeg_vbi_itv0_line * 35)]


class v4l2_mpeg_vbi_ITV0(Struct):
    _pack_ = True


v4l2_mpeg_vbi_ITV0._fields_ = [("line", v4l2_mpeg_vbi_itv0_line * 36)]


class v4l2_mpeg_vbi_fmt_ivtv(Struct):
    _pack_ = True

    class M1(Union):
        _pack_ = True

    M1._fields_ = [("itv0", v4l2_mpeg_vbi_itv0), ("ITV0", v4l2_mpeg_vbi_ITV0)]

    _anonymous_ = ("m1",)


v4l2_mpeg_vbi_fmt_ivtv._fields_ = [("magic", cchar * 4), ("m1", v4l2_mpeg_vbi_fmt_ivtv.M1)]


class v4l2_plane_pix_format(Struct):
    _pack_ = True


v4l2_plane_pix_format._fields_ = [("sizeimage", cuint), ("bytesperline", cuint), ("reserved", u16 * 6)]


class v4l2_pix_format_mplane(Struct):
    _pack_ = True

    class M1(Union):
        _pack_ = True

    M1._fields_ = [("ycbcr_enc", u8), ("hsv_enc", u8)]

    _anonymous_ = ("m1",)


v4l2_pix_format_mplane._fields_ = [
    ("width", cuint),
    ("height", cuint),
    ("pixelformat", cuint),
    ("field", cuint),
    ("colorspace", cuint),
    ("plane_fmt", v4l2_plane_pix_format * 8),
    ("num_planes", u8),
    ("flags", u8),
    ("m1", v4l2_pix_format_mplane.M1),
    ("quantization", u8),
    ("xfer_func", u8),
    ("reserved", cchar * 7),
]


class v4l2_sdr_format(Struct):
    _pack_ = True


v4l2_sdr_format._fields_ = [("pixelformat", cuint), ("buffersize", cuint), ("reserved", cchar * 24)]


class v4l2_meta_format(Struct):
    _pack_ = True


v4l2_meta_format._fields_ = [
    ("dataformat", cuint),
    ("buffersize", cuint),
    ("width", cuint),
    ("height", cuint),
    ("bytesperline", cuint),
]


class v4l2_format(Struct):
    class M1(Union):
        pass

    M1._fields_ = [
        ("pix", v4l2_pix_format),
        ("pix_mp", v4l2_pix_format_mplane),
        ("win", v4l2_window),
        ("vbi", v4l2_vbi_format),
        ("sliced", v4l2_sliced_vbi_format),
        ("sdr", v4l2_sdr_format),
        ("meta", v4l2_meta_format),
        ("raw_data", cchar * 200),
    ]


v4l2_format._fields_ = [("type", cuint), ("fmt", v4l2_format.M1)]


class v4l2_streamparm(Struct):
    class M1(Union):
        pass

    M1._fields_ = [("capture", v4l2_captureparm), ("output", v4l2_outputparm), ("raw_data", cchar * 200)]


v4l2_streamparm._fields_ = [("type", cuint), ("parm", v4l2_streamparm.M1)]


class v4l2_event_vsync(Struct):
    _pack_ = True


v4l2_event_vsync._fields_ = [("field", u8)]


class v4l2_event_ctrl(Struct):
    class M1(Union):
        pass

    M1._fields_ = [("value", cint), ("value64", clonglong)]

    _anonymous_ = ("m1",)


v4l2_event_ctrl._fields_ = [
    ("changes", cuint),
    ("type", cuint),
    ("m1", v4l2_event_ctrl.M1),
    ("flags", cuint),
    ("minimum", cint),
    ("maximum", cint),
    ("step", cint),
    ("default_value", cint),
]


class v4l2_event_frame_sync(Struct):
    pass


v4l2_event_frame_sync._fields_ = [("frame_sequence", cuint)]


class v4l2_event_src_change(Struct):
    pass


v4l2_event_src_change._fields_ = [("changes", cuint)]


class v4l2_event_motion_det(Struct):
    pass


v4l2_event_motion_det._fields_ = [("flags", cuint), ("frame_sequence", cuint), ("region_mask", cuint)]


class v4l2_event(Struct):
    class M1(Union):
        pass

    M1._fields_ = [
        ("vsync", v4l2_event_vsync),
        ("ctrl", v4l2_event_ctrl),
        ("frame_sync", v4l2_event_frame_sync),
        ("src_change", v4l2_event_src_change),
        ("motion_det", v4l2_event_motion_det),
        ("data", cchar * 64),
    ]


v4l2_event._fields_ = [
    ("type", cuint),
    ("u", v4l2_event.M1),
    ("pending", cuint),
    ("sequence", cuint),
    ("timestamp", timespec),
    ("id", cuint),
    ("reserved", cuint * 8),
]


class v4l2_event_subscription(Struct):
    pass


v4l2_event_subscription._fields_ = [("type", cuint), ("id", cuint), ("flags", cuint), ("reserved", cuint * 5)]


class v4l2_dbg_match(Struct):
    _pack_ = True

    class M1(Union):
        pass

    M1._fields_ = [("addr", cuint), ("name", cchar * 32)]

    _anonymous_ = ("m1",)


v4l2_dbg_match._fields_ = [("type", cuint), ("m1", v4l2_dbg_match.M1)]


class v4l2_dbg_register(Struct):
    _pack_ = True


v4l2_dbg_register._fields_ = [("match", v4l2_dbg_match), ("size", cuint), ("reg", culonglong), ("val", culonglong)]


class v4l2_dbg_chip_info(Struct):
    _pack_ = True


v4l2_dbg_chip_info._fields_ = [
    ("match", v4l2_dbg_match),
    ("name", cchar * 32),
    ("flags", cuint),
    ("reserved", cuint * 32),
]


class v4l2_create_buffers(Struct):
    pass


v4l2_create_buffers._fields_ = [
    ("index", cuint),
    ("count", cuint),
    ("memory", cuint),
    ("format", v4l2_format),
    ("capabilities", cuint),
    ("flags", cuint),
    ("max_num_buffers", cuint),
    ("reserved", cuint * 5),
]


class v4l2_remove_buffers(Struct):
    pass


v4l2_remove_buffers._fields_ = [("index", cuint), ("count", cuint), ("type", cuint), ("reserved", cuint * 13)]


class v4l2_mbus_framefmt(Struct):
    class M1(Union):
        pass

    M1._fields_ = [("ycbcr_enc", u16), ("hsv_enc", u16)]

    _anonymous_ = ("m1",)


v4l2_mbus_framefmt._fields_ = [
    ("width", cuint),
    ("height", cuint),
    ("code", cuint),
    ("field", cuint),
    ("colorspace", cuint),
    ("m1", v4l2_mbus_framefmt.M1),
    ("quantization", u16),
    ("xfer_func", u16),
    ("flags", u16),
    ("reserved", u16 * 10),
]


class v4l2_subdev_format(Struct):
    pass


v4l2_subdev_format._fields_ = [
    ("which", cuint),
    ("pad", cuint),
    ("format", v4l2_mbus_framefmt),
    ("stream", cuint),
    ("reserved", cuint * 7),
]


class v4l2_subdev_crop(Struct):
    pass


v4l2_subdev_crop._fields_ = [
    ("which", cuint),
    ("pad", cuint),
    ("rect", v4l2_rect),
    ("stream", cuint),
    ("reserved", cuint * 7),
]


class v4l2_subdev_mbus_code_enum(Struct):
    pass


v4l2_subdev_mbus_code_enum._fields_ = [
    ("pad", cuint),
    ("index", cuint),
    ("code", cuint),
    ("which", cuint),
    ("flags", cuint),
    ("stream", cuint),
    ("reserved", cuint * 6),
]


class v4l2_subdev_frame_size_enum(Struct):
    pass


v4l2_subdev_frame_size_enum._fields_ = [
    ("index", cuint),
    ("pad", cuint),
    ("code", cuint),
    ("min_width", cuint),
    ("max_width", cuint),
    ("min_height", cuint),
    ("max_height", cuint),
    ("which", cuint),
    ("stream", cuint),
    ("reserved", cuint * 7),
]


class v4l2_subdev_frame_interval(Struct):
    pass


v4l2_subdev_frame_interval._fields_ = [
    ("pad", cuint),
    ("interval", v4l2_fract),
    ("stream", cuint),
    ("which", cuint),
    ("reserved", cuint * 7),
]


class v4l2_subdev_frame_interval_enum(Struct):
    pass


v4l2_subdev_frame_interval_enum._fields_ = [
    ("index", cuint),
    ("pad", cuint),
    ("code", cuint),
    ("width", cuint),
    ("height", cuint),
    ("interval", v4l2_fract),
    ("which", cuint),
    ("stream", cuint),
    ("reserved", cuint * 7),
]


class v4l2_subdev_selection(Struct):
    pass


v4l2_subdev_selection._fields_ = [
    ("which", cuint),
    ("pad", cuint),
    ("target", cuint),
    ("flags", cuint),
    ("r", v4l2_rect),
    ("stream", cuint),
    ("reserved", cuint * 7),
]


class v4l2_subdev_capability(Struct):
    pass


v4l2_subdev_capability._fields_ = [("version", cuint), ("capabilities", cuint), ("reserved", cuint * 14)]


class v4l2_subdev_route(Struct):
    pass


v4l2_subdev_route._fields_ = [
    ("sink_pad", cuint),
    ("sink_stream", cuint),
    ("source_pad", cuint),
    ("source_stream", cuint),
    ("flags", cuint),
    ("reserved", cuint * 5),
]


class v4l2_subdev_routing(Struct):
    pass


v4l2_subdev_routing._fields_ = [
    ("which", cuint),
    ("len_routes", cuint),
    ("routes", culonglong),
    ("num_routes", cuint),
    ("reserved", cuint * 11),
]


class v4l2_subdev_client_capability(Struct):
    pass


v4l2_subdev_client_capability._fields_ = [("capabilities", culonglong)]


# STD macros are too complicated to auto generate


class StandardID(enum.IntFlag):
    PAL_B = 0x00000001
    PAL_B1 = 0x00000002
    PAL_G = 0x00000004
    PAL_H = 0x00000008
    PAL_I = 0x00000010
    PAL_D = 0x00000020
    PAL_D1 = 0x00000040
    PAL_K = 0x00000080
    PAL_M = 0x00000100
    PAL_N = 0x00000200
    PAL_Nc = 0x00000400
    PAL_60 = 0x00000800
    NTSC_M = 0x00001000  # BTSC
    NTSC_M_JP = 0x00002000  # EIA-J
    NTSC_443 = 0x00004000
    NTSC_M_KR = 0x00008000  # FM A2
    SECAM_B = 0x00010000
    SECAM_D = 0x00020000
    SECAM_G = 0x00040000
    SECAM_H = 0x00080000
    SECAM_K = 0x00100000
    SECAM_K1 = 0x00200000
    SECAM_L = 0x00400000
    SECAM_LC = 0x00800000
    ATSC_8_VSB = 0x01000000
    ATSC_16_VSB = 0x02000000


class IOC(enum.IntEnum):
    QUERYCAP = _IOR("V", 0, v4l2_capability)
    ENUM_FMT = _IOWR("V", 2, v4l2_fmtdesc)
    G_FMT = _IOWR("V", 4, v4l2_format)
    S_FMT = _IOWR("V", 5, v4l2_format)
    REQBUFS = _IOWR("V", 8, v4l2_requestbuffers)
    QUERYBUF = _IOWR("V", 9, v4l2_buffer)
    G_FBUF = _IOR("V", 10, v4l2_framebuffer)
    S_FBUF = _IOW("V", 11, v4l2_framebuffer)
    OVERLAY = _IOW("V", 14, cint)
    QBUF = _IOWR("V", 15, v4l2_buffer)
    EXPBUF = _IOWR("V", 16, v4l2_exportbuffer)
    DQBUF = _IOWR("V", 17, v4l2_buffer)
    STREAMON = _IOW("V", 18, cint)
    STREAMOFF = _IOW("V", 19, cint)
    G_PARM = _IOWR("V", 21, v4l2_streamparm)
    S_PARM = _IOWR("V", 22, v4l2_streamparm)
    G_STD = _IOR("V", 23, v4l2_std_id)
    S_STD = _IOW("V", 24, v4l2_std_id)
    ENUMSTD = _IOWR("V", 25, v4l2_standard)
    ENUMINPUT = _IOWR("V", 26, v4l2_input)
    G_CTRL = _IOWR("V", 27, v4l2_control)
    S_CTRL = _IOWR("V", 28, v4l2_control)
    G_TUNER = _IOWR("V", 29, v4l2_tuner)
    S_TUNER = _IOW("V", 30, v4l2_tuner)
    G_AUDIO = _IOR("V", 33, v4l2_audio)
    S_AUDIO = _IOW("V", 34, v4l2_audio)
    QUERYCTRL = _IOWR("V", 36, v4l2_queryctrl)
    QUERYMENU = _IOWR("V", 37, v4l2_querymenu)
    G_INPUT = _IOR("V", 38, cint)
    S_INPUT = _IOWR("V", 39, cint)
    G_EDID = _IOWR("V", 40, v4l2_edid)
    S_EDID = _IOWR("V", 41, v4l2_edid)
    G_OUTPUT = _IOR("V", 46, cint)
    S_OUTPUT = _IOWR("V", 47, cint)
    ENUMOUTPUT = _IOWR("V", 48, v4l2_output)
    G_AUDOUT = _IOR("V", 49, v4l2_audioout)
    S_AUDOUT = _IOW("V", 50, v4l2_audioout)
    G_MODULATOR = _IOWR("V", 54, v4l2_modulator)
    S_MODULATOR = _IOW("V", 55, v4l2_modulator)
    G_FREQUENCY = _IOWR("V", 56, v4l2_frequency)
    S_FREQUENCY = _IOW("V", 57, v4l2_frequency)
    CROPCAP = _IOWR("V", 58, v4l2_cropcap)
    G_CROP = _IOWR("V", 59, v4l2_crop)
    S_CROP = _IOW("V", 60, v4l2_crop)
    G_JPEGCOMP = _IOR("V", 61, v4l2_jpegcompression)
    S_JPEGCOMP = _IOW("V", 62, v4l2_jpegcompression)
    QUERYSTD = _IOR("V", 63, v4l2_std_id)
    TRY_FMT = _IOWR("V", 64, v4l2_format)
    ENUMAUDIO = _IOWR("V", 65, v4l2_audio)
    ENUMAUDOUT = _IOWR("V", 66, v4l2_audioout)
    G_PRIORITY = _IOR("V", 67, u32)  # enum v4l2_priority
    S_PRIORITY = _IOW("V", 68, u32)  # enum v4l2_priority
    G_SLICED_VBI_CAP = _IOWR("V", 69, v4l2_sliced_vbi_cap)
    LOG_STATUS = _IO("V", 70)
    G_EXT_CTRLS = _IOWR("V", 71, v4l2_ext_controls)
    S_EXT_CTRLS = _IOWR("V", 72, v4l2_ext_controls)
    TRY_EXT_CTRLS = _IOWR("V", 73, v4l2_ext_controls)
    ENUM_FRAMESIZES = _IOWR("V", 74, v4l2_frmsizeenum)
    ENUM_FRAMEINTERVALS = _IOWR("V", 75, v4l2_frmivalenum)
    G_ENC_INDEX = _IOR("V", 76, v4l2_enc_idx)
    ENCODER_CMD = _IOWR("V", 77, v4l2_encoder_cmd)
    TRY_ENCODER_CMD = _IOWR("V", 78, v4l2_encoder_cmd)
    DBG_S_REGISTER = _IOW("V", 79, v4l2_dbg_register)
    DBG_G_REGISTER = _IOWR("V", 80, v4l2_dbg_register)
    S_HW_FREQ_SEEK = _IOW("V", 82, v4l2_hw_freq_seek)
    S_DV_TIMINGS = _IOWR("V", 87, v4l2_dv_timings)
    G_DV_TIMINGS = _IOWR("V", 88, v4l2_dv_timings)
    DQEVENT = _IOR("V", 89, v4l2_event)
    SUBSCRIBE_EVENT = _IOW("V", 90, v4l2_event_subscription)
    UNSUBSCRIBE_EVENT = _IOW("V", 91, v4l2_event_subscription)
    CREATE_BUFS = _IOWR("V", 92, v4l2_create_buffers)
    PREPARE_BUF = _IOWR("V", 93, v4l2_buffer)
    G_SELECTION = _IOWR("V", 94, v4l2_selection)
    S_SELECTION = _IOWR("V", 95, v4l2_selection)
    DECODER_CMD = _IOWR("V", 96, v4l2_decoder_cmd)
    TRY_DECODER_CMD = _IOWR("V", 97, v4l2_decoder_cmd)
    ENUM_DV_TIMINGS = _IOWR("V", 98, v4l2_enum_dv_timings)
    QUERY_DV_TIMINGS = _IOR("V", 99, v4l2_dv_timings)
    DV_TIMINGS_CAP = _IOWR("V", 100, v4l2_dv_timings_cap)
    ENUM_FREQ_BANDS = _IOWR("V", 101, v4l2_frequency_band)
    DBG_G_CHIP_INFO = _IOWR("V", 102, v4l2_dbg_chip_info)
    QUERY_EXT_CTRL = _IOWR("V", 103, v4l2_query_ext_ctrl)
    REMOVE_BUFS = _IOWR("V", 104, v4l2_remove_buffers)
    SUBDEV_QUERYCAP = _IOR("V", 0, v4l2_subdev_capability)
    SUBDEV_G_FMT = _IOWR("V", 4, v4l2_subdev_format)
    SUBDEV_S_FMT = _IOWR("V", 5, v4l2_subdev_format)
    SUBDEV_G_FRAME_INTERVAL = _IOWR("V", 21, v4l2_subdev_frame_interval)
    SUBDEV_S_FRAME_INTERVAL = _IOWR("V", 22, v4l2_subdev_frame_interval)
    SUBDEV_ENUM_MBUS_CODE = _IOWR("V", 2, v4l2_subdev_mbus_code_enum)
    SUBDEV_ENUM_FRAME_SIZE = _IOWR("V", 74, v4l2_subdev_frame_size_enum)
    SUBDEV_ENUM_FRAME_INTERVAL = _IOWR("V", 75, v4l2_subdev_frame_interval_enum)
    SUBDEV_G_CROP = _IOWR("V", 59, v4l2_subdev_crop)
    SUBDEV_S_CROP = _IOWR("V", 60, v4l2_subdev_crop)
    SUBDEV_G_SELECTION = _IOWR("V", 61, v4l2_subdev_selection)
    SUBDEV_S_SELECTION = _IOWR("V", 62, v4l2_subdev_selection)
    SUBDEV_G_ROUTING = _IOWR("V", 38, v4l2_subdev_routing)
    SUBDEV_S_ROUTING = _IOWR("V", 39, v4l2_subdev_routing)
    SUBDEV_G_CLIENT_CAP = _IOR("V", 101, v4l2_subdev_client_capability)
    SUBDEV_S_CLIENT_CAP = _IOWR("V", 102, v4l2_subdev_client_capability)
    SUBDEV_G_STD = _IOR("V", 23, v4l2_std_id)
    SUBDEV_S_STD = _IOW("V", 24, v4l2_std_id)
    SUBDEV_ENUMSTD = _IOWR("V", 25, v4l2_standard)
    SUBDEV_G_EDID = _IOWR("V", 40, v4l2_edid)
    SUBDEV_S_EDID = _IOWR("V", 41, v4l2_edid)
    SUBDEV_QUERYSTD = _IOR("V", 63, v4l2_std_id)
    SUBDEV_S_DV_TIMINGS = _IOWR("V", 87, v4l2_dv_timings)
    SUBDEV_G_DV_TIMINGS = _IOWR("V", 88, v4l2_dv_timings)
    SUBDEV_ENUM_DV_TIMINGS = _IOWR("V", 98, v4l2_enum_dv_timings)
    SUBDEV_QUERY_DV_TIMINGS = _IOR("V", 99, v4l2_dv_timings)
    SUBDEV_DV_TIMINGS_CAP = _IOWR("V", 100, v4l2_dv_timings_cap)
