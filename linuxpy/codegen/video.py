#
# This file is part of the linuxpy project
#
# Copyright (c) 2023 Tiago Coutinho
# Distributed under the GPLv3 license. See LICENSE for more info.

import pathlib

from .base import CEnum, run

this_dir = pathlib.Path(__file__).parent


HEADERS = [
    "/usr/include/linux/v4l2-common.h",
    "/usr/include/linux/v4l2-controls.h",
    "/usr/include/linux/videodev2.h",
    "/usr/include/linux/v4l2-mediabus.h",
    "/usr/include/linux/v4l2-dv-timings.h",
    "/usr/include/linux/v4l2-subdev.h",
]


TEMPLATE = """\
#
# This file is part of the linuxpy project
#
# Copyright (c) 2023 Tiago Coutinho
# Distributed under the GPLv3 license. See LICENSE for more info.

# This file has been generated by {name}
# Date: {date}
# System: {system}
# Release: {release}
# Version: {version}

import enum

from linuxpy.ctypes import (
    POINTER,
    Struct,
    Union,
    cchar,
    cint,
    clonglong,
    cuint,
    culong,
    culonglong,
    i16,
    timespec,
    timeval,
    u8,
    u16,
    u32,
    u64,
)
from linuxpy.ioctl import IO as _IO, IOR as _IOR, IOW as _IOW, IOWR as _IOWR
from linuxpy.video.util import v4l2_fourcc, v4l2_fourcc_be

v4l2_std_id = u64

{enums_body}


{structs_body}

# STD macros are too complicated to auto generate

class StandardID(enum.IntFlag):
    PAL_B       = 0x00000001
    PAL_B1      = 0x00000002
    PAL_G       = 0x00000004
    PAL_H       = 0x00000008
    PAL_I       = 0x00000010
    PAL_D       = 0x00000020
    PAL_D1      = 0x00000040
    PAL_K       = 0x00000080
    PAL_M       = 0x00000100
    PAL_N       = 0x00000200
    PAL_Nc      = 0x00000400
    PAL_60      = 0x00000800
    NTSC_M      = 0x00001000	# BTSC
    NTSC_M_JP   = 0x00002000	# EIA-J
    NTSC_443    = 0x00004000
    NTSC_M_KR   = 0x00008000	# FM A2
    SECAM_B     = 0x00010000
    SECAM_D     = 0x00020000
    SECAM_G     = 0x00040000
    SECAM_H     = 0x00080000
    SECAM_K     = 0x00100000
    SECAM_K1    = 0x00200000
    SECAM_L     = 0x00400000
    SECAM_LC    = 0x00800000
    ATSC_8_VSB  = 0x01000000
    ATSC_16_VSB = 0x02000000

{iocs_body}"""


# macros from #define statements
MACRO_ENUMS = [
    CEnum("SelectionFlag", "V4L2_SEL_FLAG_", "IntFlag"),
    CEnum("SelectionTarget", "V4L2_SEL_TGT_"),
    CEnum("Capability", "V4L2_CAP_", "IntFlag"),
    CEnum("PixelFormat", "V4L2_PIX_FMT_"),
    CEnum("MetaFormat", "V4L2_META_FMT_"),
    CEnum("TouchFormat", "V4L2_TCH_FMT_"),
    CEnum("SDRFormat", "V4L2_SDR_FMT_"),
    CEnum("BufferFlag", "V4L2_BUF_FLAG_", "IntFlag"),
    CEnum("ImageFormatFlag", "V4L2_FMT_FLAG_", "IntFlag"),
    CEnum("InputStatus", "V4L2_IN_ST_", "IntFlag"),
    CEnum("InputType", "V4L2_INPUT_TYPE_"),
    CEnum("OutputType", "V4L2_OUTPUT_TYPE_"),
    CEnum("InputCapabilities", "V4L2_IN_CAP_", "IntFlag"),
    CEnum("OutputCapabilities", "V4L2_OUT_CAP_", "IntFlag"),
    CEnum("ControlClass", "V4L2_CTRL_CLASS_"),
    CEnum("ControlID", "V4L2_CID_"),
    CEnum("ControlFlag", "V4L2_CTRL_FLAG_", "IntFlag"),
    CEnum("ControlWhichValue", "V4L2_CTRL_WHICH_"),
    CEnum("TimeCodeType", "V4L2_TC_TYPE_"),
    CEnum("TimeCodeFlag", "V4L2_TC_FLAG_", "IntFlag"),
    CEnum("EventSubscriptionFlag", "V4L2_EVENT_SUB_FL_", "IntFlag"),
    CEnum("EventControlChange", "V4L2_EVENT_CTRL_CH_", "IntFlag"),
    CEnum("EventType", "V4L2_EVENT_"),
    CEnum("MbusFrameFormatFlag", "V4L2_MBUS_FRAMEFMT_", "IntFlag"),
    # It is very dificult to match just only these two values using prefix, so put whole name there
    CEnum("Interlaced", ["V4L2_DV_PROGRESSIVE", "V4L2_DV_INTERLACED"], with_prefix=True),
    # It is very dificult to match just only these two values using prefix, so put whole name there
    CEnum("PositivePolarityFlag", ["V4L2_DV_VSYNC_POS_POL", "V4L2_DV_HSYNC_POS_POL"], "IntFlag", with_prefix=True),
    CEnum("DVTimingsStandardFlag", "V4L2_DV_BT_STD_", "IntFlag"),
    CEnum("DVTimingsFlag", "V4L2_DV_FL_", "IntFlag"),
    CEnum("DVTimingsCapabilities", "V4L2_DV_BT_CAP_", "IntFlag"),
    CEnum("IOC", "VIDIOC_"),
]


def main(output=this_dir.parent / "video" / "raw.py"):
    run(__name__, HEADERS, TEMPLATE, MACRO_ENUMS, output=output)


if __name__ == "__main__":
    main()
