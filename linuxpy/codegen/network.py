#
# This file is part of the linuxpy project
#
# Copyright (c) 2025 Tiago Coutinho
# Distributed under the GPLv3 license. See LICENSE for more info.

import pathlib

from linuxpy.codegen.base import CEnum, run

HEADERS = [
    #    "/usr/include/linux/if.h",
    #    "/usr/include/linux/hdlc/ioctl.h",
    "/usr/include/linux/netlink.h",
    "/usr/include/linux/sockios.h",
    "/usr/include/linux/wireless.h",
]


TEMPLATE = """\
#
# This file is part of the linuxpy project
#
# Copyright (c) 2025 Tiago Coutinho
# Distributed under the GPLv3 license. See LICENSE for more info.

# This file has been generated by {name}
# Date: {date}
# System: {system}
# Release: {release}
# Version: {version}

import enum

from linuxpy.ioctl import IOR as _IOR, IOW as _IOW, IOWR as _IOWR
from linuxpy.ctypes import i16, u8, u16, cuint, culong, cint, cchar
from linuxpy.ctypes import Struct, Union, POINTER
from linuxpy.sock import sockaddr


{enums_body}


{structs_body}


{iocs_body}
"""

this_dir = pathlib.Path(__file__).parent


class IOC(CEnum):
    def __init__(self):
        def filter(name, value):
            return name not in {"SIOCINQ", "SIOCOUTQ"} and "GSTAMP" not in name

        super().__init__("IOC", "SIOC", filter=filter)


MACRO_ENUMS = [
    IOC(),
    CEnum("EventType", "IWEV"),
    CEnum("OperationMode", "IW_MODE_"),
    CEnum("Auth", "IW_AUTH_"),
    CEnum("EncodeAlg", "IW_ENCODE_ALG_"),
    CEnum("EncodeExt", "IW_ENCODE_EXT_", "IntFlag"),
    CEnum("EncodingFlag", "IW_ENCODE_", "IntFlag"),
    CEnum("StatsFlag", "IW_QUAL_", "IntFlag"),
    CEnum("FrequencyFlag", "IW_FREQ_", "IntFlag"),
    CEnum("PowerFlag", "IW_POWER_", "IntFlag"),
    CEnum("TransmitPowerFlag", "IW_TXPOW_", "IntFlag"),
    CEnum("RetryFlag", "IW_RETRY_", "IntFlag"),
    CEnum("ScanCapabilityFlag", "IW_SCAN_CAPA_", "IntFlag"),
    CEnum("ScanType", "IW_SCAN_TYPE_"),
    CEnum("ScanFlag", "IW_SCAN_", "IntFlag"),
    CEnum("MicFailureFlag", "IW_MICFAILURE_", "IntFlag"),
    CEnum("EncodeCapabilityFlag", "IW_ENC_CAPA_", "IntFlag"),
]


def main(output=this_dir.parent / "network" / "raw.py"):
    run(__name__, HEADERS, TEMPLATE, MACRO_ENUMS, output=output)


if __name__ == "__main__":
    main()
