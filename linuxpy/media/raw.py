#
# This file is part of the linuxpy project
#
# Copyright (c) 2024 Tiago Coutinho
# Distributed under the GPLv3 license. See LICENSE for more info.

# This file has been generated by __main__
# Date: 2024-09-04 17:47:49.559403
# System: Linux
# Release: 6.8.0-41-generic
# Version: #41-Ubuntu SMP PREEMPT_DYNAMIC Fri Aug  2 20:41:06 UTC 2024

import enum

from linuxpy.ctypes import POINTER, Struct, Union, cchar, cint, cuint, culonglong, u16
from linuxpy.ioctl import IOR as _IOR, IOWR as _IOWR

ENTITY_ID_FLAG_NEXT = 1 << 31


class EntityFunction(enum.IntEnum):
    BASE = 0x0
    OLD_BASE = 0x10000
    OLD_SUBDEV_BASE = 0x20000
    UNKNOWN = BASE
    V4L2_SUBDEV_UNKNOWN = OLD_SUBDEV_BASE
    DTV_DEMOD = BASE + 0x00001
    TS_DEMUX = BASE + 0x00002
    DTV_CA = BASE + 0x00003
    DTV_NET_DECAP = BASE + 0x00004
    IO_V4L = OLD_BASE + 1
    IO_DTV = BASE + 0x01001
    IO_VBI = BASE + 0x01002
    IO_SWRADIO = BASE + 0x01003
    CAM_SENSOR = OLD_SUBDEV_BASE + 1
    FLASH = OLD_SUBDEV_BASE + 2
    LENS = OLD_SUBDEV_BASE + 3
    TUNER = OLD_SUBDEV_BASE + 5
    IF_VID_DECODER = BASE + 0x02001
    IF_AUD_DECODER = BASE + 0x02002
    AUDIO_CAPTURE = BASE + 0x03001
    AUDIO_PLAYBACK = BASE + 0x03002
    AUDIO_MIXER = BASE + 0x03003
    PROC_VIDEO_COMPOSER = BASE + 0x4001
    PROC_VIDEO_PIXEL_FORMATTER = BASE + 0x4002
    PROC_VIDEO_PIXEL_ENC_CONV = BASE + 0x4003
    PROC_VIDEO_LUT = BASE + 0x4004
    PROC_VIDEO_SCALER = BASE + 0x4005
    PROC_VIDEO_STATISTICS = BASE + 0x4006
    PROC_VIDEO_ENCODER = BASE + 0x4007
    PROC_VIDEO_DECODER = BASE + 0x4008
    PROC_VIDEO_ISP = BASE + 0x4009
    VID_MUX = BASE + 0x5001
    VID_IF_BRIDGE = BASE + 0x5002
    ATV_DECODER = OLD_SUBDEV_BASE + 4
    DV_DECODER = BASE + 0x6001
    DV_ENCODER = BASE + 0x6002
    DTV_DECODER = DV_DECODER


class EntityFlag(enum.IntFlag):
    DEFAULT = 1 << 0
    CONNECTOR = 1 << 1


class PadFlag(enum.IntFlag):
    SINK = 1 << 0
    SOURCE = 1 << 1
    MUST_CONNECT = 1 << 2


class LinkFlag(enum.IntFlag):
    ENABLED = 1 << 0
    IMMUTABLE = 1 << 1
    DYNAMIC = 1 << 2
    LINK_TYPE = 0xF << 28
    DATA_LINK = 0 << 28
    INTERFACE_LINK = 1 << 28
    ANCILLARY_LINK = 2 << 28


class InterfaceType(enum.IntEnum):
    DVB_BASE = 0x100
    V4L_BASE = 0x200
    DVB_FE = DVB_BASE
    DVB_DEMUX = DVB_BASE + 1
    DVB_DVR = DVB_BASE + 2
    DVB_CA = DVB_BASE + 3
    DVB_NET = DVB_BASE + 4
    V4L_VIDEO = V4L_BASE
    V4L_VBI = V4L_BASE + 1
    V4L_RADIO = V4L_BASE + 2
    V4L_SUBDEV = V4L_BASE + 3
    V4L_SWRADIO = V4L_BASE + 4
    V4L_TOUCH = V4L_BASE + 5
    ALSA_BASE = 0x300
    ALSA_PCM_CAPTURE = ALSA_BASE
    ALSA_PCM_PLAYBACK = ALSA_BASE + 1
    ALSA_CONTROL = ALSA_BASE + 2
    ALSA_COMPRESS = ALSA_BASE + 3
    ALSA_RAWMIDI = ALSA_BASE + 4
    ALSA_HWDEP = ALSA_BASE + 5
    ALSA_SEQUENCER = ALSA_BASE + 6
    ALSA_TIMER = ALSA_BASE + 7


class media_device_info(Struct):
    pass


media_device_info._fields_ = [
    ("driver", cchar * 16),
    ("model", cchar * 32),
    ("serial", cchar * 40),
    ("bus_info", cchar * 32),
    ("media_version", cuint),
    ("hw_revision", cuint),
    ("driver_version", cuint),
    ("reserved", cuint * 31),
]


class media_entity_desc(Struct):
    class M1(Union):
        class M1(Struct):
            pass

        M1._fields_ = [("major", cuint), ("minor", cuint)]

        class M2(Struct):
            pass

        M2._fields_ = [("card", cuint), ("device", cuint), ("subdevice", cuint)]

        class M3(Struct):
            pass

        M3._fields_ = [("major", cuint), ("minor", cuint)]

        class M4(Struct):
            pass

        M4._fields_ = [("major", cuint), ("minor", cuint)]

    M1._fields_ = [("dev", M1.M1), ("alsa", M1.M2), ("v4l", M1.M3), ("fb", M1.M4), ("dvb", cint), ("raw", cchar * 184)]

    _anonymous_ = ("m1",)


media_entity_desc._fields_ = [
    ("id", cuint),
    ("name", cchar * 32),
    ("type", cuint),
    ("revision", cuint),
    ("flags", cuint),
    ("group_id", cuint),
    ("pads", u16),
    ("links", u16),
    ("reserved", cuint * 4),
    ("m1", media_entity_desc.M1),
]


class media_pad_desc(Struct):
    pass


media_pad_desc._fields_ = [("entity", cuint), ("index", u16), ("flags", cuint), ("reserved", cuint * 2)]


class media_link_desc(Struct):
    pass


media_link_desc._fields_ = [
    ("source", media_pad_desc),
    ("sink", media_pad_desc),
    ("flags", cuint),
    ("reserved", cuint * 2),
]


class media_links_enum(Struct):
    pass


media_links_enum._fields_ = [
    ("entity", cuint),
    ("pads", POINTER(media_pad_desc)),
    ("links", POINTER(media_link_desc)),
    ("reserved", cuint * 4),
]


class media_v2_entity(Struct):
    _pack_ = True


media_v2_entity._fields_ = [
    ("id", cuint),
    ("name", cchar * 64),
    ("function", cuint),
    ("flags", cuint),
    ("reserved", cuint * 5),
]


class media_v2_intf_devnode(Struct):
    _pack_ = True


media_v2_intf_devnode._fields_ = [("major", cuint), ("minor", cuint)]


class media_v2_interface(Struct):
    _pack_ = True

    class M1(Union):
        pass

    M1._fields_ = [("devnode", media_v2_intf_devnode), ("raw", cuint * 16)]

    _anonymous_ = ("m1",)


media_v2_interface._fields_ = [
    ("id", cuint),
    ("intf_type", cuint),
    ("flags", cuint),
    ("reserved", cuint * 9),
    ("m1", media_v2_interface.M1),
]


class media_v2_pad(Struct):
    _pack_ = True


media_v2_pad._fields_ = [
    ("id", cuint),
    ("entity_id", cuint),
    ("flags", cuint),
    ("index", cuint),
    ("reserved", cuint * 4),
]


class media_v2_link(Struct):
    _pack_ = True


media_v2_link._fields_ = [
    ("id", cuint),
    ("source_id", cuint),
    ("sink_id", cuint),
    ("flags", cuint),
    ("reserved", cuint * 6),
]


class media_v2_topology(Struct):
    _pack_ = True


media_v2_topology._fields_ = [
    ("topology_version", culonglong),
    ("num_entities", cuint),
    ("reserved1", cuint),
    ("ptr_entities", culonglong),
    ("num_interfaces", cuint),
    ("reserved2", cuint),
    ("ptr_interfaces", culonglong),
    ("num_pads", cuint),
    ("reserved3", cuint),
    ("ptr_pads", culonglong),
    ("num_links", cuint),
    ("reserved4", cuint),
    ("ptr_links", culonglong),
]


class IOC(enum.IntEnum):
    DEVICE_INFO = _IOWR("|", 0x00, media_device_info)
    ENUM_ENTITIES = _IOWR("|", 0x01, media_entity_desc)
    ENUM_LINKS = _IOWR("|", 0x02, media_links_enum)
    SETUP_LINK = _IOWR("|", 0x03, media_link_desc)
    G_TOPOLOGY = _IOWR("|", 0x04, media_v2_topology)
    REQUEST_ALLOC = _IOR("|", 0x05, cint)
